<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HeQing</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-28T03:04:36.106Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HeQing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 一道面试题</title>
    <link href="http://yoursite.com/2019/02/28/iOS%20%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2019/02/28/iOS 一道面试题/</id>
    <published>2019-02-28T03:04:23.474Z</published>
    <updated>2019-02-28T03:04:36.106Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>iOS 一道面试题<br><a id="more"></a></p></blockquote><h3 id="写出以下代码的打印结果"><a href="#写出以下代码的打印结果" class="headerlink" title="写出以下代码的打印结果"></a>写出以下代码的打印结果</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(test) withObject:<span class="literal">nil</span> afterDelay:<span class="number">.0</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)test</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：<strong>1 3</strong></p><p><code>[self performSelector:@selector(test) withObject:nil afterDelay:.0];</code><br>这句代码的本质是往<code>Runloop</code>中添加定时器，但是子线程的<code>Runloop</code>默认是未启动的。</p><h3 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(test) withObject:<span class="literal">nil</span> afterDelay:<span class="number">.0</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">    [[<span class="built_in">NSRunLoop</span> currentRunLoop] runMode:<span class="built_in">NSDefaultRunLoopMode</span> beforeDate:[<span class="built_in">NSDate</span> distantFuture]];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)test</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];</code>启动<code>Runloop</code>后  </p><p>打印结果 <strong>1 3 2</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;iOS 一道面试题&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>定制个性化 Xcode Templates</title>
    <link href="http://yoursite.com/2019/01/07/%E5%AE%9A%E5%88%B6%E4%B8%AA%E6%80%A7%E5%8C%96%20Xcode%20Templates/"/>
    <id>http://yoursite.com/2019/01/07/定制个性化 Xcode Templates/</id>
    <published>2019-01-07T07:27:58.961Z</published>
    <updated>2019-01-07T07:27:58.961Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当我们用Xcode的默认模板创建一个empty Swift文件的时候，在文件的顶部会带有一部分注释信息，例如文件名称等，还会默认import Foundation。其实我们如果不想显示这信息可以自己定制模板。<br><a id="more"></a></p></blockquote><p>Xcode为我们提供丰富的模板，如图：</p><p><img src="http://wx1.sinaimg.cn/mw690/006zcW7Ely1fyxv6o3ch3j314k0t87em.jpg" alt=""></p><p>使用默认模板创建一个<code>empty Swift</code>文件时，在顶部会包含一些原始数据和一个<code>import</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  HQTest.swift</span></span><br><span class="line"><span class="comment">//  test</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by gandijun on 2019/1/7.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 HeQing. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br></pre></td></tr></table></figure><p>如果我们想每次创建文件的时候，删除这些信息，并且不每次手动删除，就需要定制个性化的模板。</p><h3 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h3><p>为了创建我们自己的模板，我们可以copy一个系统的模板，然后把它顶部的存在的代码删掉。</p><p>Xcode查找自定义模板的路径：<code>~/Library/Developer/Xcode/Templates</code>。<br>这里的文件夹在Xcode中打开时会被当成组。我们将创建一个名为<code>Custom</code>的组并且把系统自带的<code>Swift template</code>拷贝进去。</p><p>在终端中执行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/Library/Developer/Xcode/Templates/Custom</span><br><span class="line">$ cp -R /Applications/Xcode.app/Contents/Developer/Library/Xcode/Templates/File\ Templates/Source/Swift\ File.xctemplate ~/Library/Developer/Xcode/Templates/Custom/</span><br></pre></td></tr></table></figure><p>模板拷贝完成，我们<code>cd</code>进去看看都有什么。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/Library/Developer/Xcode/Templates/Custom/Swift\ File.xctemplate</span><br><span class="line">$ ls</span><br><span class="line">TemplateIcon.png          TemplateIcon@2x.png       TemplateInfo.plist        ___FILEBASENAME___.swift</span><br></pre></td></tr></table></figure><p>这里面有一些icons，一个plist文件和一个Swift的文件。打开这个swift文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat ___FILEBASENAME___.swift</span><br><span class="line">//___FILEHEADER___</span><br><span class="line"></span><br><span class="line">import Foundation</span><br></pre></td></tr></table></figure><p>这个就是系统的<code>empty swift</code>模板。<br>通过编辑器删除里面的内容，或者通过终端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm ___FILEBASENAME___.swift</span><br><span class="line">$ touch ___FILEBASENAME___.swift</span><br></pre></td></tr></table></figure><p>到这里就完成了。<br>打开Xcode创建一个新的Swift文件，选择Custom组里面的模板。<br>你会发现创建的文件的顶部的代码消失了！</p><p><img src="http://wx1.sinaimg.cn/mw690/006zcW7Ely1fyy1ux4p8dj314k0t848d.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当我们用Xcode的默认模板创建一个empty Swift文件的时候，在文件的顶部会带有一部分注释信息，例如文件名称等，还会默认import Foundation。其实我们如果不想显示这信息可以自己定制模板。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift 捕获列表Capture List</title>
    <link href="http://yoursite.com/2019/01/04/Swift%20%E6%8D%95%E8%8E%B7%E5%88%97%E8%A1%A8Capture%20List/"/>
    <id>http://yoursite.com/2019/01/04/Swift 捕获列表Capture List/</id>
    <published>2019-01-04T08:46:46.104Z</published>
    <updated>2019-01-04T08:46:46.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们都知道swift闭包捕获的是引用，但是swift闭包任何时候都是捕获变量的引用吗？并不是！<br><a id="more"></a></p></blockquote><h3 id="闭包的特点"><a href="#闭包的特点" class="headerlink" title="闭包的特点"></a>闭包的特点</h3><p>在使用<code>Swift</code>编写程序时经常使用闭包，我们都知道<code>swift</code>闭包捕获的是引用，但是<code>swift</code>闭包任何时候都是捕获变量的引用吗？并不是！有时会使用到<strong>捕获列表</strong>，我们经常使用[weak self]来防止内存泄漏。</p><p>我们来看一个简单的例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> closure : () -&gt; () = &#123; <span class="built_in">print</span>(a, b) &#125;</span><br></pre></td></tr></table></figure><p>执行闭包</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">closure()   <span class="comment">// 0 0</span></span><br></pre></td></tr></table></figure><p>改变a,b的值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">7</span></span><br></pre></td></tr></table></figure><p>再次调用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">closure()  <span class="comment">// 3 7</span></span><br></pre></td></tr></table></figure><p>我们可以很直观的看到现在的a,b值都改变了。<code>swift</code>的闭包中捕获到的值是捕获的引用。所以一旦你改变了这些捕获变量的值，在闭包中就会反应出来。</p><h3 id="引用类型会带来一些问题"><a href="#引用类型会带来一些问题" class="headerlink" title="引用类型会带来一些问题"></a>引用类型会带来一些问题</h3><p>很多时候，闭包的特性并不总是那么直观，很容易带来一些奇怪的错误。比如，我们创建一个<code>Array</code>，然后数组的类型是闭包</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrayClosure :  [() -&gt; ()] = []</span><br></pre></td></tr></table></figure><p>执行下面的代码，将闭包添加到数组中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>...<span class="number">3</span> &#123;  </span><br><span class="line">    arrayClosure.append &#123; <span class="built_in">print</span>(i) &#125;</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条用数组中的三个闭包看看打印值:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arrayClosure[<span class="number">0</span>]()<span class="comment">// 3</span></span><br><span class="line">arrayClosure[<span class="number">1</span>]()<span class="comment">// 3</span></span><br><span class="line">arrayClosure[<span class="number">2</span>]()<span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>闭包打印的值都是最后一次的值。因为闭包捕获的是<strong>i</strong>的引用。如果想打印出1，2，3就要捕获到i的值。这时候就需要用到<strong>捕获列表</strong>了。</p><p>再看下面的例子，我们加了<code>[c, d] in</code> ，关键字 <code>in</code> 的左边就是我们的重点，这里表示的不是数组，而是<strong>捕获列表</strong>。一旦用了<strong>捕获列表</strong>，闭包捕获的将不是原始值的引用，而是在闭包内生成了一个原始值的copy副本。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anotherClosure : () -&gt; () = &#123;  [<span class="built_in">c</span>, d]  <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">c</span>, d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> = <span class="number">3</span></span><br><span class="line">d = <span class="number">7</span></span><br></pre></td></tr></table></figure><p>调用闭包</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anotherClosure() <span class="comment">// 0, 0</span></span><br></pre></td></tr></table></figure><p>例子2修改打印1，2，3</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>...<span class="number">3</span> &#123;  </span><br><span class="line">    arrayClosure.append &#123; [i] <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(i) </span><br><span class="line">    &#125;</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条用数组中的三个闭包看看打印值:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arrayClosure[<span class="number">0</span>]()<span class="comment">// 1</span></span><br><span class="line">arrayClosure[<span class="number">1</span>]()<span class="comment">// 2</span></span><br><span class="line">arrayClosure[<span class="number">2</span>]()<span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们都知道swift闭包捕获的是引用，但是swift闭包任何时候都是捕获变量的引用吗？并不是！&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="Capture List" scheme="http://yoursite.com/tags/Capture-List/"/>
    
  </entry>
  
  <entry>
    <title>Swift 排序</title>
    <link href="http://yoursite.com/2018/12/29/MySql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/12/29/MySql数据库操作笔记/</id>
    <published>2018-12-29T03:32:37.792Z</published>
    <updated>2019-02-28T02:45:59.185Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MySql数据库基本操作笔记<br><a id="more"></a></p></blockquote><h3 id="命令行链接"><a href="#命令行链接" class="headerlink" title="命令行链接"></a>命令行链接</h3><ul><li><p>打开终端，运行命令</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">回车后输入数据库的密码</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">- 链接成功后如下</span><br><span class="line"></span><br><span class="line">![](https://img-blog.csdnimg.cn/20190220110602870.png)</span><br><span class="line"></span><br><span class="line">- 退出登录</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">quit 和 <span class="built_in">exit</span> </span><br><span class="line">或</span><br><span class="line">ctrl+d</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>登陆成功后，输入如下命令查看效果 </p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看版本：<span class="keyword">select</span> <span class="keyword">version</span>();</span><br><span class="line">显示当前时间：<span class="keyword">select</span> <span class="keyword">now</span>();</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li><p>查看所有数据库</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用数据库</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查看当前使用的数据库</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>();</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>创建数据库</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名 <span class="keyword">charset</span>=utf8;</span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> python <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除数据库</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名;</span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> python;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><ul><li><p>查看当前数据库中的表</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查看表结构</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure></li></ul><ul><li>创建表</li><li><p>auto_increment表示自动增长</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name(</span><br><span class="line">   column1 datatype contrai,</span><br><span class="line">   column2 datatype,</span><br><span class="line">   column3 datatype,</span><br><span class="line">   .....</span><br><span class="line">   columnN datatype,</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span>(one <span class="keyword">or</span> more <span class="keyword">columns</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><pre><code>例如：创建班级表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> classes(</span><br><span class="line">   <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>例如：创建学生表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students(</span><br><span class="line">   <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> primary <span class="keyword">key</span> auto_increment <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">   age tinyint <span class="keyword">unsigned</span> <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">   height <span class="built_in">decimal</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line">   gender enum(<span class="string">'男'</span>,<span class="string">'女'</span>,<span class="string">'人妖'</span>,<span class="string">'保密'</span>),</span><br><span class="line">   cls_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>修改表-添加字段</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 类型;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> birthday datetime;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改表-修改字段：重命名版</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 原名 新名 类型及约束;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">change</span> birthday birth datetime <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改表-修改字段：不重命名版</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 列名 类型及约束;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">modify</span> birth <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改表-删除字段</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">drop</span> birthday;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除表</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> students;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查看表的创建语句</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> classes;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MySql数据库基本操作笔记&lt;br&gt;
    
    </summary>
    
      <category term="MySql" scheme="http://yoursite.com/categories/MySql/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Swift 面试遇到的一道算法题</title>
    <link href="http://yoursite.com/2018/12/29/Swift%20%E9%9D%A2%E8%AF%95%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/12/29/Swift 面试遇到的一道算法题/</id>
    <published>2018-12-29T03:32:37.792Z</published>
    <updated>2019-02-28T02:38:15.996Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>找到一个数字<code>A</code>的下一个离他最近的比他大的数字<code>B</code>，且<code>B</code>的各位数的数字完全有<code>A</code>的各位数的数字组成。<br><a id="more"></a></p></blockquote><h4 id="一道算法题"><a href="#一道算法题" class="headerlink" title="一道算法题"></a>一道算法题</h4><p>找到一个数字<code>A</code>的下一个离他最近的比他大的数字<code>B</code>，且<code>B</code>的各位数的数字完全有<code>A</code>的各位数的数字组成。</p><p>例如：<code>A=123</code> 则<code>B=132</code>。<br>找到：<code>A=123654</code> 对应的数字<code>B</code>。</p><p>这道题用到了<strong>字典序算法</strong>。</p><p>步骤：</p><ul><li>在这个序列中从右至左找第一个左邻小于右邻的数，<code>3</code></li><li>在<code>3</code>后面的数字中找到比<code>3</code>大的数字中最小的数字<code>4</code></li><li>交换<code>3</code>和<code>4</code>的位置</li><li>最后把<code>3</code>后面的数字逆向排序</li></ul><p><code>Swift</code>代码实现</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findNearestNumber</span><span class="params">(numbers: [Int])</span></span> -&gt; [<span class="type">Int</span>]? &#123;</span><br><span class="line">    <span class="keyword">var</span> numbersCopy = numbers</span><br><span class="line">    <span class="keyword">let</span> index = findTransferPoint(numbers: numbersCopy)</span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    numbersCopy = exchangeHead(numbers: numbersCopy, index: index)</span><br><span class="line">    numbersCopy = <span class="built_in">reverse</span>(numbers: numbersCopy, index: index)</span><br><span class="line">    <span class="keyword">return</span> numbersCopy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从这个序列中从右至左找第一个左邻小于右邻的数下标</span></span><br><span class="line"><span class="comment">// 如果找不到则这个数就是由这几个数字组成的最大的数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findTransferPoint</span><span class="params">(numbers: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i, number) <span class="keyword">in</span> numbers.enumerated().reversed() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">guard</span> i &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> number &gt; numbers[i-<span class="number">1</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换找到的数与后面比它大的数字中的最小数字的位置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exchangeHead</span><span class="params">(numbers: [Int], index: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> numbersCopy = numbers</span><br><span class="line">    <span class="keyword">let</span> head = numbersCopy[index-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> (i, number) <span class="keyword">in</span> numbersCopy.enumerated().reversed() &#123;</span><br><span class="line">        <span class="keyword">if</span> number &gt; head &#123;</span><br><span class="line">            numbersCopy[index-<span class="number">1</span>] = number</span><br><span class="line">            numbersCopy[i] = head</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbersCopy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后面数组逆向排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(numbers: [Int], index: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> numbersCopy = numbers</span><br><span class="line">    <span class="keyword">var</span> j = numbersCopy.<span class="built_in">count</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> index..&lt;numbersCopy.<span class="built_in">count</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> i &lt; j &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = numbersCopy[i]</span><br><span class="line">            numbersCopy[i] = numbersCopy[j]</span><br><span class="line">            numbersCopy[j] = temp</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbersCopy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findNearestNumber(numbers: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果 [1, 2, 4, 3, 5, 6]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;找到一个数字&lt;code&gt;A&lt;/code&gt;的下一个离他最近的比他大的数字&lt;code&gt;B&lt;/code&gt;，且&lt;code&gt;B&lt;/code&gt;的各位数的数字完全有&lt;code&gt;A&lt;/code&gt;的各位数的数字组成。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Swift 排序</title>
    <link href="http://yoursite.com/2018/12/29/Swift%20%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/12/29/Swift 排序/</id>
    <published>2018-12-29T03:32:37.792Z</published>
    <updated>2019-02-28T02:01:11.388Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>swift自带的排序效率很高<br><a id="more"></a></p></blockquote><h3 id="swift自带的排序效率很高，总结如下"><a href="#swift自带的排序效率很高，总结如下" class="headerlink" title="swift自带的排序效率很高，总结如下"></a>swift自带的排序效率很高，总结如下</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 排序一个数组，升序</span></span><br><span class="line">nums.<span class="built_in">sort</span>()</span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line">nums.<span class="built_in">sort</span>(by: &gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序一个数组不改变原始数组返回一个新的排好序的数组, 升序</span></span><br><span class="line"><span class="keyword">var</span> sortedNums = nums.sorted()</span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line"><span class="keyword">var</span> sortedNums = nums.sorted(by: &gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序一个自定义对象的数组根据对象的某个属性, 升序</span></span><br><span class="line">timeIntervals.<span class="built_in">sort</span> &#123; $<span class="number">0</span>.startTime &lt; $<span class="number">1</span>.startTime &#125;</span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line">timeIntervals.<span class="built_in">sort</span> &#123; $<span class="number">0</span>.startTime &gt; $<span class="number">1</span>.startTime &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据字典的key对应的value去排序一个字典的keys, 升序</span></span><br><span class="line"><span class="keyword">let</span> keys = <span class="type">Array</span>(dict.keys)</span><br><span class="line"><span class="keyword">var</span> sortedKeys = keys.sorted &#123;</span><br><span class="line">  <span class="keyword">let</span> value0 = dict[$<span class="number">0</span>]!</span><br><span class="line">  <span class="keyword">let</span> value1 = dict[$<span class="number">1</span>]!</span><br><span class="line">  <span class="keyword">return</span> value0 &lt; value1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;swift自带的排序效率很高&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS开发Tips" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91Tips/"/>
    
  </entry>
  
  <entry>
    <title>swift copy-on-write</title>
    <link href="http://yoursite.com/2018/12/29/swift%20copy-on-write/"/>
    <id>http://yoursite.com/2018/12/29/swift copy-on-write/</id>
    <published>2018-12-29T03:32:37.792Z</published>
    <updated>2019-02-28T02:34:57.781Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>swift</code>中的数组是值类型，copy的时候是直接复制的数组的完整内容。<br>但是<code>swift</code>采用了<code>copy-on-write</code>机制。<br><a id="more"></a></p></blockquote><p><code>swift</code>中的数组是值类型，copy的时候是直接复制的数组的完整内容。<br>但是<code>swift</code>采用了<code>copy-on-write</code>机制。<br>如果仅仅copy一个数组不对其进行修改，不会copy其完整的内容，仅仅引用其指针。<br>只有当对原数组进行修改的时候才会copy其完整的内容，保证了性能。</p><p>对其进行验证：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> copyA = arrA</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBufferAdd</span>&lt;T&gt;<span class="params">(<span class="number">_</span> array: [T])</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> array.withUnsafeBufferPointer &#123; butter <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(describing: butter.baseAddress)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getBufferAdd(arrA)  <span class="comment">// Optional(0x0000600002c070a0)</span></span><br><span class="line">getBufferAdd(copyA) <span class="comment">// Optional(0x0000600002c070a0)</span></span><br><span class="line"></span><br><span class="line">arrA.append(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">getBufferAdd(arrA)  <span class="comment">// Optional(0x0000600001d1d2e0)</span></span><br><span class="line">getBufferAdd(copyA) <span class="comment">// Optional(0x0000600002c070a0)</span></span><br></pre></td></tr></table></figure><p><code>withUnsafeBufferPointer</code>是<code>swift</code>数组的一个方法可以获取数组内容的地址将其传给闭包中的参数。我们将其转化成为字符串。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;swift&lt;/code&gt;中的数组是值类型，copy的时候是直接复制的数组的完整内容。&lt;br&gt;但是&lt;code&gt;swift&lt;/code&gt;采用了&lt;code&gt;copy-on-write&lt;/code&gt;机制。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS开发Tips" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91Tips/"/>
    
  </entry>
  
  <entry>
    <title>Charles抓包 http、https</title>
    <link href="http://yoursite.com/2018/12/29/Charles%E6%8A%93%E5%8C%85%20http%E3%80%81https/"/>
    <id>http://yoursite.com/2018/12/29/Charles抓包 http、https/</id>
    <published>2018-12-29T03:32:37.792Z</published>
    <updated>2019-02-28T02:55:59.832Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Charles抓包 http、https步骤详情记录<br><a id="more"></a></p></blockquote><h3 id="抓取http"><a href="#抓取http" class="headerlink" title="抓取http"></a>抓取http</h3><ol><li><p>打开Charles</p></li><li><p>查找电脑端ip</p><p> <img src="https://img-blog.csdnimg.cn/20190221170949452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMzE0MTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>手机端同一局域网下手动配置代理       </p><p> <img src="https://img-blog.csdnimg.cn/2019022117161879.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMzE0MTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>手机打开任意APP请求网络，Charles会弹出确认窗口，点击同意后，可以开始抓包操作。</p></li></ol><h3 id="抓取https"><a href="#抓取https" class="headerlink" title="抓取https"></a>抓取https</h3><ol><li><p>点击Charles Help -&gt; SSL Proxying -&gt; Install Charles Root Certificate on a Mobile Device</p><p> <img src="https://img-blog.csdnimg.cn/2019022117243467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMzE0MTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>弹出如下框</p><p> <img src="https://img-blog.csdnimg.cn/2019022117264757.png" alt="在这里插入图片描述"></p><p>在手机<code>Safari</code>浏览器输入地址 <code>chls.pro/ssl</code>，出现证书安装页面，点击安装<br>手机设置有密码的输入密码进行安装<br>如下图安装完成<br>(如果抓取Mac端数据，则在Mac的<code>Safari</code>浏览器输入地址 <code>chls.pro/ssl</code>，下载证书双击安装后在钥匙串中找到设置信任即可)</p><p> <img src="https://img-blog.csdnimg.cn/20190221172819533.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMzE0MTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>设置-&gt;通用-&gt;关于本机-&gt;证书信任设置<br> 信任刚才的证书</p><p> <img src="https://img-blog.csdnimg.cn/20190221173046838.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMzE0MTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>配置Charles Proxy<br> Proxy -&gt; SSL Proxying Settings</p><p> <img src="https://img-blog.csdnimg.cn/20190222084312438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMzE0MTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 勾选Enable SSL Proxying，点击Add</p><p> <img src="https://img-blog.csdnimg.cn/20190222084527545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMzE0MTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 填写信息，点击确认OK后，即可抓取此域名下的数据。</p><p> <img src="https://img-blog.csdnimg.cn/20190222085743582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMzE0MTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 抓取测试</p><p> <img src="https://img-blog.csdnimg.cn/20190222085753917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMzE0MTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><p>Charles注册码，感谢分享<br>Registered Name: <a href="https://zhile.io" target="_blank" rel="noopener">https://zhile.io</a><br>License Key: 48891cf209c6d32bf4<br>4.2.7版本亲测可用</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Charles抓包 http、https步骤详情记录&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Charles" scheme="http://yoursite.com/tags/Charles/"/>
    
  </entry>
  
  <entry>
    <title>小说API</title>
    <link href="http://yoursite.com/2018/12/29/%E5%B0%8F%E8%AF%B4API/"/>
    <id>http://yoursite.com/2018/12/29/小说API/</id>
    <published>2018-12-29T03:32:37.792Z</published>
    <updated>2019-02-28T02:51:25.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>抓取小说接口，自己开发小说APP练习使用<br><a id="more"></a></p></blockquote><ul><li><p><strong>小说排行榜</strong> (header 里面有个if-None-Match 后续研究)<br>  564d820bc319238a644fb408、564d8494fe996c25652644d2、54d42d92321052167dfb75e3（三个榜）<br><strong><a href="https://api.zhuishushenqi.com/ranking/564d820bc319238a644fb408" target="_blank" rel="noopener">https://api.zhuishushenqi.com/ranking/564d820bc319238a644fb408</a></strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;ranking&quot;: &#123;</span><br><span class="line">&quot;_id&quot;: &quot;564d820bc319238a644fb408&quot;,</span><br><span class="line">&quot;updated&quot;: &quot;2015-11-20T10:06:08.571Z&quot;,</span><br><span class="line">&quot;title&quot;: &quot;追书最热榜月榜男&quot;,</span><br><span class="line">&quot;tag&quot;: &quot;zhuishuMonthHotMale&quot;,</span><br><span class="line">&quot;cover&quot;: &quot;/ranking-cover/144792013856420&quot;,</span><br><span class="line">&quot;__v&quot;: 1,</span><br><span class="line">&quot;created&quot;: &quot;2019-02-21T07:06:46.904Z&quot;,</span><br><span class="line">&quot;biTag&quot;: &quot;false&quot;,</span><br><span class="line">&quot;isSub&quot;: true,</span><br><span class="line">&quot;collapse&quot;: false,</span><br><span class="line">&quot;new&quot;: true,</span><br><span class="line">&quot;gender&quot;: &quot;male&quot;,</span><br><span class="line">&quot;priority&quot;: 1000,</span><br><span class="line">&quot;books&quot;: [&#123;</span><br><span class="line">&quot;_id&quot;: &quot;5642be60f1b24c7a7468c5d7&quot;,</span><br><span class="line">&quot;title&quot;: &quot;逆鳞&quot;,</span><br><span class="line">&quot;author&quot;: &quot;柳下挥&quot;,</span><br><span class="line">&quot;shortIntro&quot;: &quot;天生废材，遭遇龙神附体。继承了神龙的意念和能力，生鳞幻爪、御水龙息、行云降雨，肉身无敌。\r\n在这个人人都想屠龙的时代，李牧羊一直生活的很有压力。&quot;,</span><br><span class="line">&quot;cover&quot;: &quot;/agent/http%3A%2F%2Fimg.1391.com%2Fapi%2Fv1%2Fbookcenter%2Fcover%2F1%2F883124%2F883124_b0e96427594e4e97bc2a7235e2b36114.jpg%2F&quot;,</span><br><span class="line">&quot;site&quot;: &quot;zhuishuvip&quot;,</span><br><span class="line">&quot;majorCate&quot;: &quot;都市&quot;,</span><br><span class="line">&quot;minorCate&quot;: &quot;都市生活&quot;,</span><br><span class="line">&quot;allowMonthly&quot;: true,</span><br><span class="line">&quot;banned&quot;: 0,</span><br><span class="line">&quot;latelyFollower&quot;: 5097,</span><br><span class="line">&quot;retentionRatio&quot;: &quot;38.2&quot;</span><br><span class="line">&#125;],</span><br><span class="line">&quot;id&quot;: &quot;564d820bc319238a644fb408&quot;,</span><br><span class="line">&quot;total&quot;: 183</span><br><span class="line">&#125;,</span><br><span class="line">&quot;ok&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>根据关键字搜索小说</strong><br>  例如搜索“神墓”小说<br>  <strong><a href="https://api.zhuishushenqi.com/book/fuzzy-search?query=%E7%A5%9E%E5%A2%93&amp;start=0&amp;limit=100" target="_blank" rel="noopener">https://api.zhuishushenqi.com/book/fuzzy-search?query=%E7%A5%9E%E5%A2%93&amp;start=0&amp;limit=100</a></strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;books&quot;: [&#123;</span><br><span class="line">&quot;_id&quot;: &quot;508751bef98e8f7446000024&quot;,</span><br><span class="line">&quot;hasCp&quot;: true,</span><br><span class="line">&quot;title&quot;: &quot;神墓&quot;,</span><br><span class="line">&quot;aliases&quot;: &quot;&quot;,</span><br><span class="line">&quot;cat&quot;: &quot;玄幻&quot;,</span><br><span class="line">&quot;author&quot;: &quot;辰东&quot;,</span><br><span class="line">&quot;site&quot;: &quot;zhuishuvip&quot;,</span><br><span class="line">&quot;cover&quot;: &quot;/agent/http%3A%2F%2Fimg.1391.com%2Fapi%2Fv1%2Fbookcenter%2Fcover%2F1%2F41924%2F41924_a53ddaf38363440dbf903742170dac8f.jpg%2F&quot;,</span><br><span class="line">&quot;shortIntro&quot;: &quot;我的新书《遮天》上传了，不一样的震撼与精彩，请各位书友支持。\r\n&quot;,</span><br><span class="line">&quot;lastChapter&quot;: &quot;第761章 大结局&quot;,</span><br><span class="line">&quot;retentionRatio&quot;: 49.15,</span><br><span class="line">&quot;banned&quot;: 0,</span><br><span class="line">&quot;allowMonthly&quot;: false,</span><br><span class="line">&quot;latelyFollower&quot;: 6238,</span><br><span class="line">&quot;wordCount&quot;: 2915305,</span><br><span class="line">&quot;contentType&quot;: &quot;txt&quot;,</span><br><span class="line">&quot;superscript&quot;: &quot;&quot;,</span><br><span class="line">&quot;sizetype&quot;: -1,</span><br><span class="line">&quot;highlight&quot;: &#123;</span><br><span class="line">&quot;title&quot;: [&quot;神&quot;, &quot;墓&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line">&quot;total&quot;: 44,</span><br><span class="line">&quot;ok&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>根据小说类型搜索小说</strong><br>(header 里面有个if-None-Match 后续研究)<br>  例如搜索“玄幻”类型小说<br><strong><a href="https://api.zhuishushenqi.com/book/by-categories?gender=male&amp;type=hot&amp;major=%E7%8E%84%E5%B9%BB&amp;minor=&amp;start=0&amp;limit=50" target="_blank" rel="noopener">https://api.zhuishushenqi.com/book/by-categories?gender=male&amp;type=hot&amp;major=%E7%8E%84%E5%B9%BB&amp;minor=&amp;start=0&amp;limit=50</a></strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;total&quot;: 24116,</span><br><span class="line">&quot;books&quot;: [&#123;</span><br><span class="line">&quot;_id&quot;: &quot;5816b415b06d1d32157790b1&quot;,</span><br><span class="line">&quot;title&quot;: &quot;圣墟&quot;,</span><br><span class="line">&quot;author&quot;: &quot;辰东&quot;,</span><br><span class="line">&quot;shortIntro&quot;: &quot;在破败中崛起，在寂灭中复苏。沧海成尘，雷电枯竭，那一缕幽雾又一次临近大地，世间的枷锁被打开了，一个全新的世界就此揭开神秘的一角……&quot;,</span><br><span class="line">&quot;cover&quot;: &quot;/agent/http%3A%2F%2Fimg.1391.com%2Fapi%2Fv1%2Fbookcenter%2Fcover%2F1%2F1228859%2F1228859_d14f18e849b34420904ead54936e440a.jpg%2F&quot;,</span><br><span class="line">&quot;site&quot;: &quot;zhuishuvip&quot;,</span><br><span class="line">&quot;majorCate&quot;: &quot;玄幻&quot;,</span><br><span class="line">&quot;minorCate&quot;: &quot;东方玄幻&quot;,</span><br><span class="line">&quot;sizetype&quot;: -1,</span><br><span class="line">&quot;superscript&quot;: &quot;&quot;,</span><br><span class="line">&quot;contentType&quot;: &quot;txt&quot;,</span><br><span class="line">&quot;allowMonthly&quot;: false,</span><br><span class="line">&quot;banned&quot;: 0,</span><br><span class="line">&quot;latelyFollower&quot;: 150261,</span><br><span class="line">&quot;retentionRatio&quot;: 39.53,</span><br><span class="line">&quot;lastChapter&quot;: &quot;正文卷 第1375章 谁与争雄&quot;,</span><br><span class="line">&quot;tags&quot;: []</span><br><span class="line">&#125;],</span><br><span class="line">&quot;ok&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>根据小说_id搜索小说的章节</strong><br>  <strong><a href="https://api.zhuishushenqi.com/mix-toc/52159104c8f1be8010000015" target="_blank" rel="noopener">https://api.zhuishushenqi.com/mix-toc/52159104c8f1be8010000015</a></strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;mixToc&quot;: &#123;</span><br><span class="line">&quot;_id&quot;: &quot;53a2bfecfda0a68d82ff18e3&quot;,</span><br><span class="line">&quot;book&quot;: &quot;52159104c8f1be8010000015&quot;,</span><br><span class="line">&quot;chaptersCount1&quot;: 2656,</span><br><span class="line">&quot;chaptersUpdated&quot;: &quot;2017-08-19T22:29:42.305Z&quot;,</span><br><span class="line">&quot;chapters&quot;: [&#123;</span><br><span class="line">&quot;title&quot;: &quot;第一章 苍老师的女粉丝？&quot;,</span><br><span class="line">&quot;link&quot;: &quot;http://book.my716.com/getBooks.aspx?method=content&amp;bookId=685484&amp;chapterFile=774380_201601150554230375_1.txt&quot;,</span><br><span class="line">&quot;unreadble&quot;: false</span><br><span class="line">&#125;],</span><br><span class="line">&quot;updated&quot;: &quot;2018-02-10T19:33:42.612Z&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;ok&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>获取每章小说的内容<br>  <a href="https://chapter2.zhuishushenqi.com/chapter/http%3A%2F%2Fbook.my716.com%2FgetBooks.aspx%3Fmethod%3Dcontent%26bookId%3D685484%26chapterFile%3D774380_201601150554230375_1.txt?k=SGJGBHUSDJNCDLHK&amp;t=1550730993" target="_blank" rel="noopener">https://chapter2.zhuishushenqi.com/chapter/http%3A%2F%2Fbook.my716.com%2FgetBooks.aspx%3Fmethod%3Dcontent%26bookId%3D685484%26chapterFile%3D774380_201601150554230375_1.txt?k=SGJGBHUSDJNCDLHK&amp;t=1550730993</a></strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;ok&quot;: true,</span><br><span class="line">&quot;chapter&quot;: &#123;</span><br><span class="line">&quot;title&quot;: &quot;.&quot;,</span><br><span class="line">&quot;body&quot;: &quot;喧嚣的出站口外人流涌动，充斥着各种味道。天空上，烈日肆意地挥洒着热量，让人不由得心中烦闷。\n萧风挤出庞大的出站人流，停下脚步，狠狠地吸了口香烟，眯起略显狭长的眼睛，仰头看了眼烈日，长叹道：“阳光下的生活，真好！”\n...&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;抓取小说接口，自己开发小说APP练习使用&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="API" scheme="http://yoursite.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Swift 用数组实现栈和队列</title>
    <link href="http://yoursite.com/2018/12/29/Swift%20%E7%94%A8%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2018/12/29/Swift 用数组实现栈和队列/</id>
    <published>2018-12-29T03:32:37.792Z</published>
    <updated>2019-02-28T02:30:21.473Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Swift语言中没有内设的栈和队列，可以用数组实现<br><a id="more"></a></p></blockquote><h4 id="Swift语言中没有内设的栈和队列"><a href="#Swift语言中没有内设的栈和队列" class="headerlink" title="Swift语言中没有内设的栈和队列"></a>Swift语言中没有内设的栈和队列</h4><ul><li>栈是<strong>先进后出</strong>的结构</li><li>几个基本操作：<code>push、pop、isEmpty、peek、size</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> stack: [<span class="type">AnyObject</span>]</span><br><span class="line">    <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123; <span class="keyword">return</span> stack.isEmpty &#125;</span><br><span class="line">    <span class="keyword">var</span> peek: <span class="type">AnyObject</span>? &#123; <span class="keyword">return</span> stack.last &#125;</span><br><span class="line">    <span class="keyword">var</span> size: <span class="type">Int</span> &#123; <span class="keyword">return</span> stack.<span class="built_in">count</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        stack = [<span class="type">AnyObject</span>]()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(object: AnyObject)</span></span> &#123;</span><br><span class="line">        stack.append(object)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">AnyObject</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> !isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> stack.removeLast()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>队列是<strong>先进先出</strong>的结构</li><li>几个基本操作：<code>enqueue、dequeue、isEmpty、peek、size</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">left</span>: [<span class="type">AnyObject</span>]</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">right</span>: [<span class="type">AnyObject</span>]</span><br><span class="line">    <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123; <span class="keyword">return</span> <span class="keyword">left</span>.isEmpty &amp;&amp; <span class="keyword">right</span>.isEmpty &#125;</span><br><span class="line">    <span class="keyword">var</span> size: <span class="type">Int</span> &#123; <span class="keyword">return</span> <span class="keyword">left</span>.<span class="built_in">count</span> + <span class="keyword">right</span>.<span class="built_in">count</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> peek: <span class="type">AnyObject</span>? &#123; <span class="keyword">return</span> <span class="keyword">left</span>.isEmpty ? <span class="keyword">right</span>.first : <span class="keyword">left</span>.last &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">left</span> = [<span class="type">AnyObject</span>]()</span><br><span class="line">        <span class="keyword">right</span> = [<span class="type">AnyObject</span>]()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enqueue</span><span class="params">(object: AnyObject)</span></span> &#123;</span><br><span class="line">        <span class="keyword">right</span>.append(object)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dequeue</span><span class="params">()</span></span> -&gt; <span class="type">AnyObject</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">left</span>.isEmpty &#123;</span><br><span class="line">            <span class="keyword">left</span> = <span class="keyword">right</span>.reversed()</span><br><span class="line">            <span class="keyword">right</span>.removeAll()</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> !<span class="keyword">left</span>.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">left</span>.removeLast()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Swift语言中没有内设的栈和队列，可以用数组实现&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="栈和队列" scheme="http://yoursite.com/tags/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Tap手势和UITableView点击冲突问题</title>
    <link href="http://yoursite.com/2018/12/29/Tap%E6%89%8B%E5%8A%BF%E5%92%8CUITableView%E7%82%B9%E5%87%BB%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/12/29/Tap手势和UITableView点击冲突问题/</id>
    <published>2018-12-29T03:32:37.792Z</published>
    <updated>2018-12-29T03:40:19.691Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过UIGestureRecognizerDelegate解决<br><a id="more"></a></p></blockquote><h3 id="方案代码"><a href="#方案代码" class="headerlink" title="方案代码"></a>方案代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gestureRecognizer</span><span class="params">(<span class="number">_</span> gestureRecognizer: UIGestureRecognizer, shouldReceive touch: UITouch)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">let</span> point = touch.location(<span class="keyword">in</span>: referenceView)</span><br><span class="line">    <span class="comment">//注意：touchView应该是referenceView的子视图</span></span><br><span class="line">    <span class="keyword">if</span> touchView.frame.<span class="built_in">contains</span>(point) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;     <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;通过UIGestureRecognizerDelegate解决&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="iOS开发Tips" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91Tips/"/>
    
  </entry>
  
  <entry>
    <title>iOS时间显示格式转换</title>
    <link href="http://yoursite.com/2018/12/06/iOS%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2018/12/06/iOS时间显示格式转换/</id>
    <published>2018-12-06T03:25:36.171Z</published>
    <updated>2018-12-17T05:39:50.159Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近做项目需要用到时间转换，产品要求列表时间的展示效果要跟qq一样，后台不给搞只能自己来搞喽，记录一下。<br><a id="more"></a></p></blockquote><h3 id="需求整理"><a href="#需求整理" class="headerlink" title="需求整理"></a>需求整理</h3><p><img src="http://wx1.sinaimg.cn/mw690/006zcW7Ely1fxwuhk5obgj316i0pmdk3.jpg" alt=""></p><h3 id="会话列表显示时间"><a href="#会话列表显示时间" class="headerlink" title="会话列表显示时间"></a>会话列表显示时间</h3><p>如需转成24小时制,需要使用 HH</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时间显示内容</span></span><br><span class="line">-(<span class="built_in">NSString</span> *)getDateDisplayString:(<span class="keyword">long</span> <span class="keyword">long</span>) miliSeconds&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"-时间戳---%lld_----"</span>,miliSeconds);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSTimeInterval</span> tempMilli = miliSeconds;</span><br><span class="line">    <span class="built_in">NSTimeInterval</span> seconds = tempMilli/<span class="number">1000.0</span>;</span><br><span class="line">    <span class="built_in">NSDate</span> *myDate = [<span class="built_in">NSDate</span> dateWithTimeIntervalSince1970:seconds];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSCalendar</span> *calendar = [<span class="built_in">NSCalendar</span> currentCalendar];</span><br><span class="line">    <span class="keyword">int</span> unit = <span class="built_in">NSCalendarUnitDay</span> | <span class="built_in">NSCalendarUnitMonth</span> |  <span class="built_in">NSCalendarUnitYear</span>;</span><br><span class="line">    <span class="built_in">NSDateComponents</span> *nowCmps = [calendar components:unit fromDate:[<span class="built_in">NSDate</span> date]];</span><br><span class="line">    <span class="built_in">NSDateComponents</span> *myCmps = [calendar components:unit fromDate:myDate];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSDateFormatter</span> *dateFmt = [[<span class="built_in">NSDateFormatter</span> alloc ] init];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定日历对象,要去取日期对象的那些部分.</span></span><br><span class="line">    <span class="built_in">NSDateComponents</span> *comp =  [calendar components:<span class="built_in">NSCalendarUnitYear</span>|<span class="built_in">NSCalendarUnitMonth</span>|<span class="built_in">NSCalendarUnitDay</span>|<span class="built_in">NSCalendarUnitWeekday</span> fromDate:myDate];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (nowCmps.year != myCmps.year) &#123;</span><br><span class="line">        dateFmt.dateFormat = <span class="string">@"yyyy-MM-dd hh:mm"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nowCmps.month != myCmps.month) &#123;</span><br><span class="line">        dateFmt.dateFormat = <span class="string">@"MM-dd hh:mm"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nowCmps.day==myCmps.day) &#123;</span><br><span class="line">            dateFmt.AMSymbol = <span class="string">@"上午"</span>;</span><br><span class="line">            dateFmt.PMSymbol = <span class="string">@"下午"</span>;</span><br><span class="line">            dateFmt.dateFormat = <span class="string">@"aaa hh:mm"</span>;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>((nowCmps.day-myCmps.day)==<span class="number">1</span>) &#123;</span><br><span class="line">            dateFmt.dateFormat = <span class="string">@"昨天"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((nowCmps.day-myCmps.day) &lt;=<span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (comp.weekday) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期日"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期一"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期二"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期三"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期四"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期五"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期六"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                dateFmt.dateFormat = <span class="string">@"MM-dd hh:mm"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [dateFmt stringFromDate:myDate];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="聊天列表显示时间"><a href="#聊天列表显示时间" class="headerlink" title="聊天列表显示时间"></a>聊天列表显示时间</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时间显示内容</span></span><br><span class="line">-(<span class="built_in">NSString</span> *)getDateDisplayString:(<span class="keyword">long</span> <span class="keyword">long</span>) miliSeconds&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"-时间戳---%lld_----"</span>,miliSeconds);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSTimeInterval</span> tempMilli = miliSeconds;</span><br><span class="line">    <span class="built_in">NSTimeInterval</span> seconds = tempMilli/<span class="number">1000.0</span>;</span><br><span class="line">    <span class="built_in">NSDate</span> *myDate = [<span class="built_in">NSDate</span> dateWithTimeIntervalSince1970:seconds];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSCalendar</span> *calendar = [<span class="built_in">NSCalendar</span> currentCalendar];</span><br><span class="line">    <span class="keyword">int</span> unit = <span class="built_in">NSCalendarUnitDay</span> | <span class="built_in">NSCalendarUnitMonth</span> |  <span class="built_in">NSCalendarUnitYear</span> ;</span><br><span class="line">    <span class="built_in">NSDateComponents</span> *nowCmps = [calendar components:unit fromDate:[<span class="built_in">NSDate</span> date]];</span><br><span class="line">    <span class="built_in">NSDateComponents</span> *myCmps = [calendar components:unit fromDate:myDate];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSDateFormatter</span> *dateFmt = [[<span class="built_in">NSDateFormatter</span> alloc ] init];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定日历对象,要去取日期对象的那些部分.</span></span><br><span class="line">    <span class="built_in">NSDateComponents</span> *comp =  [calendar components:<span class="built_in">NSCalendarUnitYear</span>|<span class="built_in">NSCalendarUnitMonth</span>|<span class="built_in">NSCalendarUnitDay</span>|<span class="built_in">NSCalendarUnitWeekday</span> fromDate:myDate];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (nowCmps.year != myCmps.year) &#123;</span><br><span class="line">        dateFmt.dateFormat = <span class="string">@"yyyy-MM-dd hh:mm"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nowCmps.day==myCmps.day) &#123;</span><br><span class="line">            dateFmt.AMSymbol = <span class="string">@"上午"</span>;</span><br><span class="line">            dateFmt.PMSymbol = <span class="string">@"下午"</span>;</span><br><span class="line">            dateFmt.dateFormat = <span class="string">@"aaa hh:mm"</span>;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>((nowCmps.day-myCmps.day)==<span class="number">1</span>) &#123;</span><br><span class="line">            dateFmt.AMSymbol = <span class="string">@"上午"</span>;</span><br><span class="line">            dateFmt.PMSymbol = <span class="string">@"下午"</span>;</span><br><span class="line">            dateFmt.dateFormat = <span class="string">@"昨天 aaahh:mm"</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((nowCmps.day-myCmps.day) &lt;=<span class="number">7</span>) &#123;</span><br><span class="line">                </span><br><span class="line">                dateFmt.AMSymbol = <span class="string">@"上午"</span>;</span><br><span class="line">                dateFmt.PMSymbol = <span class="string">@"下午"</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">switch</span> (comp.weekday) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期日 aaahh:mm"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期一 aaahh:mm"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期二 aaahh:mm"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期三 aaahh:mm"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期四 aaahh:mm"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期五 aaahh:mm"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                        dateFmt.dateFormat = <span class="string">@"星期六 aaahh:mm"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                dateFmt.dateFormat = <span class="string">@"MM-dd hh:mm"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [dateFmt stringFromDate:myDate];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近做项目需要用到时间转换，产品要求列表时间的展示效果要跟qq一样，后台不给搞只能自己来搞喽，记录一下。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="时间格式" scheme="http://yoursite.com/tags/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>iOS列表性能优化Tips-图片圆角</title>
    <link href="http://yoursite.com/2018/08/28/%E4%BD%BF%E7%94%A8CoreGraphics%E7%94%BB%E5%9C%86%E8%A7%92/"/>
    <id>http://yoursite.com/2018/08/28/使用CoreGraphics画圆角/</id>
    <published>2018-08-28T07:44:14.000Z</published>
    <updated>2018-08-28T07:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>layer.cornerRadius画圆角，会离屏渲染影响性能。<br><a id="more"></a></p></blockquote><h4 id="使用CoreGraphics画圆角"><a href="#使用CoreGraphics画圆角" class="headerlink" title="使用CoreGraphics画圆角"></a>使用CoreGraphics画圆角</h4><p>在UIImage分类中实现</p><p><code>#define StrokeRoundedImages 0</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIImage</span> *)makeCircularImageWithSize:(<span class="built_in">CGSize</span>)size</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// make a CGRect with the image's size</span></span><br><span class="line">  <span class="built_in">CGRect</span> circleRect = (<span class="built_in">CGRect</span>) &#123;<span class="built_in">CGPointZero</span>, size&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// begin the image context since we're not in a drawRect:</span></span><br><span class="line">  <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(circleRect.size, <span class="literal">NO</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create a UIBezierPath circle</span></span><br><span class="line">  <span class="built_in">UIBezierPath</span> *circle = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:circleRect cornerRadius:circleRect.size.width/<span class="number">2</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// clip to the circle</span></span><br><span class="line">  [circle addClip];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// draw the image in the circleRect *AFTER* the context is clipped</span></span><br><span class="line">  [<span class="keyword">self</span> drawInRect:circleRect];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// create a border (for white background pictures)</span></span><br><span class="line"><span class="meta">#if StrokeRoundedImages</span></span><br><span class="line">  circle.lineWidth = <span class="number">1</span>;</span><br><span class="line">  [[<span class="built_in">UIColor</span> darkGrayColor] set];</span><br><span class="line">  [circle stroke];</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// get an image from the image context</span></span><br><span class="line">  <span class="built_in">UIImage</span> *roundedImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// end the image context since we're not in a drawRect:</span></span><br><span class="line">  <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> roundedImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;layer.cornerRadius画圆角，会离屏渲染影响性能。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="列表性能优化" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Block相关笔记</title>
    <link href="http://yoursite.com/2018/08/02/Block%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/02/Block相关笔记/</id>
    <published>2018-08-02T06:55:00.000Z</published>
    <updated>2018-08-02T07:18:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Block相关随笔-查看OC的block相关源码做的笔记<br><a id="more"></a></p></blockquote><h3 id="block的本质"><a href="#block的本质" class="headerlink" title="block的本质"></a>block的本质</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^&#123;</span><br><span class="line"><span class="built_in">NSlog</span>(<span class="string">@"111111"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这就是一个block，<code>{}</code>前面加上一个<code>^</code>，就是一段代码块，他像函数一样不调用就不执行这段代码块。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^&#123;</span><br><span class="line"><span class="built_in">NSlog</span>(<span class="string">@"111111"</span>);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>加<code>()</code>调用一下，这样就执行了。</p><p>一般我们会把他存储起来</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line"><span class="built_in">NSlog</span>(<span class="string">@"111111"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>block就是这个block的名称，这样调用block()。</p><p><strong>block本质也是一个OC对象，它内部也有个isa指针。</strong><br><strong>block是封装了函数调用以及函数调用环境的OC对象。</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">void</span> (^block)(<span class="keyword">int</span>, <span class="keyword">int</span>) =  ^(<span class="keyword">int</span> a , <span class="keyword">int</span> b)&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"this is a block! -- %d"</span>, age);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"this is a block!"</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"this is a block!"</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"this is a block!"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数调用环境是说它里面封装了函数调用所需的参数等。比如上面的age在block的底层代码里面可以看到age变量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">    <span class="keyword">size_t</span> reserved;</span><br><span class="line">    <span class="keyword">size_t</span> Block_size; <span class="comment">// block的大小</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *isa; <span class="comment">// isa指针 所以它本质也是一个OC对象</span></span><br><span class="line">    <span class="keyword">int</span> Flags;</span><br><span class="line">    <span class="keyword">int</span> Reserved;</span><br><span class="line">    <span class="keyword">void</span> *FuncPtr; <span class="comment">// 内部函数的指针，block里面的代码都封装到这个函数地址所指向的函数里面，调用这个函数就执行block里面的代码了 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// block的底层代码</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> age; <span class="comment">// 封装的外部变量（里面所用到的外部变量）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>底层结构如下图：<br><img src="http://wx1.sinaimg.cn/mw690/006zcW7Ely1ftl0d7nx50j30ow0oyte5.jpg" alt=""></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line"><span class="built_in">NSlog</span>(<span class="string">@"111111"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">          </span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>上面的代码的底层实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义block变量</span></span><br><span class="line"><span class="keyword">void</span> (*block)(<span class="keyword">void</span>) = &amp;__main_block_impl_0(</span><br><span class="line">                                           __main_block_func_0,</span><br><span class="line">                                          &amp;__main_block_desc_0_DATA</span><br><span class="line">                                          );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行block内部的代码</span></span><br><span class="line">block-&gt;FuncPtr(block);</span><br><span class="line"><span class="comment">// block调用原代码如下，上面为精简代码</span></span><br><span class="line"><span class="comment">// ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</span></span><br></pre></td></tr></table></figure><p>这是精简过后的底层代码删掉了类型转换的代码，不影响逻辑。</p><p>调用block就是底层调用<code>FuncPtr函数</code>。注意一点的是<code>__main_block_impl_0</code>中并没有<code>FuncPtr</code>函数，<code>FuncPtr</code>在<code>__block_impl</code>中，但是block的底层<code>__main_block_impl_0</code>里面的第一个成员就是<code>__block_impl</code>，因此他们两个的地址一样，因此可以直接<code>(__block_impl *)block-&gt;FuncPtr(block);</code>强转一下调用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  <span class="comment">// 构造函数（类似于OC的init方法），返回结构体对象</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是block的底层代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装了block执行逻辑的函数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line"></span><br><span class="line">            NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_2r__m13fp2x2n9dvlr8d68yry500000gn_T_main_c60393_mi_0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数就是block里面要实现的代码。参数为block本身。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0)&#125;;</span><br></pre></td></tr></table></figure><p>这个结构体用于描述block的大小，<code>sizeof(struct __main_block_impl_0)</code>，其中<code>struct __main_block_impl_0</code>就是block本身的底层代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *isa;</span><br><span class="line">    <span class="keyword">int</span> Flags;</span><br><span class="line">    <span class="keyword">int</span> Reserved;</span><br><span class="line">    <span class="keyword">void</span> *FuncPtr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个结构体里面有isa指针，和内部函数指针。block调用时，底层调用<code>FuncPtr</code>。</p><p>如果有参数</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> (^block)(<span class="keyword">int</span>, <span class="keyword">int</span>) = ^(<span class="keyword">int</span> a, <span class="keyword">int</span> b)&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Hello, World! - %d %d"</span>, a, b);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">block(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>底层代码为：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">block-&gt;FuncPtr(block, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(<span class="keyword">struct</span> __main_block_impl_0 *__cself, <span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">     <span class="built_in">NSLog</span>((<span class="built_in">NSString</span> *)&amp;__NSConstantStringImpl__var_folders_2r__m13fp2x2n9dvlr8d68yry500000gn_T_main_87bc8b_mi_0, a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量捕获1"><a href="#变量捕获1" class="headerlink" title="变量捕获1"></a>变量捕获1</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// auto：自动变量，离开作用域就销毁</span></span><br><span class="line">auto <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> height = <span class="number">10</span>; <span class="comment">// 静态局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">    <span class="comment">// age的值捕获进来（capture）</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"age is %d, height is %d"</span>, age, height);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">age = <span class="number">20</span>;</span><br><span class="line">height = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>调用结果age is 10, height is 20.</p><p>底层代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> height = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">block = ((<span class="keyword">void</span> (*)())&amp;__test_block_impl_0((<span class="keyword">void</span> *)__test_block_func_0, &amp;__test_block_desc_0_DATA, age, &amp;height));</span><br><span class="line"></span><br><span class="line">age = <span class="number">20</span>;</span><br><span class="line">height = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">test_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">test_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  <span class="keyword">int</span> age;        &lt;=======捕获</span><br><span class="line">  <span class="keyword">int</span> *height;    &lt;=======捕获</span><br><span class="line">  __test_block_impl_0(<span class="keyword">void</span> *fp, struct __test_block_desc_0 *desc, <span class="keyword">int</span> _age, <span class="keyword">int</span> *_height, <span class="keyword">int</span> flags=<span class="number">0</span>) : age(_age), height(_height) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>age捕获的是值，height捕获的是指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __test_block_func_0(struct __test_block_impl_0 *__cself) &#123;</span><br><span class="line">  <span class="keyword">int</span> age = __cself-&gt;age; <span class="comment">// bound by copy</span></span><br><span class="line">  <span class="keyword">int</span> *height = __cself-&gt;height; <span class="comment">// bound by copy</span></span><br><span class="line"></span><br><span class="line">        NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_2r__m13fp2x2n9dvlr8d68yry500000gn_T_main_d2875b_mi_0, age, (*height));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印取值市age取得的是结构体保存的值，height取得是保存的地址里面的值。</p><p><strong>auto修饰局部变量可以捕获，值传递</strong><br><strong>static修饰局部变量可以捕获，指针传递</strong></p><h3 id="变量捕获2"><a href="#变量捕获2" class="headerlink" title="变量捕获2"></a>变量捕获2</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">int</span> age_ = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> height_ = <span class="number">10</span>;</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"age is %d, height is %d"</span>, age_, height_);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">age_ = <span class="number">20</span>;</span><br><span class="line">height_ = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>底层实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age_ = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> height_ = <span class="number">10</span>;</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">block = ((<span class="keyword">void</span> (*)())&amp;__test_block_impl_0((<span class="keyword">void</span> *)__test_block_func_0, &amp;__test_block_desc_0_DATA));</span><br><span class="line"></span><br><span class="line">age_ = <span class="number">20</span>;</span><br><span class="line">height_ = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age_ = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> height_ = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">test_block_impl_0</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">test_block_desc_0</span>* <span class="title">Desc</span>;</span></span><br><span class="line">  __test_block_impl_0(<span class="keyword">void</span> *fp, struct __test_block_desc_0 *desc, <span class="keyword">int</span> _a, <span class="keyword">int</span> *_b, <span class="keyword">int</span> flags=<span class="number">0</span>) : a(_a), b(_b) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __test_block_func_0(struct __test_block_impl_0 *__cself) &#123;</span><br><span class="line"></span><br><span class="line">        NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_2r__m13fp2x2n9dvlr8d68yry500000gn_T_main_fd2a14_mi_0, age_, height_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不会捕获！全局变量</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)test</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"-------%p"</span>, <span class="keyword">self</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>会捕捉self<br>因为<br>函数等同于</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)test:(Person * <span class="keyword">self</span>, SEL _cmd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"-------%p"</span>, <span class="keyword">self</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>oc方法都有两个默认参数self和_cmd是局部变量。</p><p><strong>总结：局部变量会捕获，全局变量不会捕获。</strong></p><h3 id="block的类型"><a href="#block的类型" class="headerlink" title="block的类型"></a>block的类型</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Hello"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [block <span class="keyword">class</span>]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [[block <span class="keyword">class</span>] superclass]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [[[block <span class="keyword">class</span>] superclass] superclass]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [[[[block <span class="keyword">class</span>] superclass] superclass] superclass]);</span><br><span class="line"></span><br><span class="line">打印结果 __NSGlobalBlock__ : __NSGlobalBlock : <span class="built_in">NSBlock</span> : <span class="built_in">NSObject</span></span><br></pre></td></tr></table></figure><p>所以说block本质是一个<strong>oc对象</strong>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (^block1)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Hello"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">void</span> (^block2)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Hello - %d"</span>, age);</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@ %@ %@"</span>, [block1 <span class="keyword">class</span>], [block2 <span class="keyword">class</span>], [^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, age);</span><br><span class="line">&#125; <span class="keyword">class</span>]);</span><br><span class="line"></span><br><span class="line">打印结果 __NSGlobalBlock__ __NSMallocBlock__ __NSStackBlock__</span><br></pre></td></tr></table></figure><p>block有3种类型，可以通过调用class方法或者isa指针查看具体类型，最终都是继承自NSBlock类型<br><code>__NSGlobalBlock__ （ _NSConcreteGlobalBlock ）</code><br><code>__NSStackBlock__ （ _NSConcreteStackBlock ）</code><br><code>__NSMallocBlock__ （ _NSConcreteMallocBlock ）</code></p><p><img src="http://wx3.sinaimg.cn/mw690/006zcW7Ely1ftl1iu5zd2j30n70ga43d.jpg" alt=""></p><p><strong>怎么判断block是哪种类型呢？</strong></p><ul><li>没有访问auto变量的就是<code>__NSGlobalBlock__</code>类型</li><li>访问了auto变量的就是<code>__NSStackBlock__</code>类型</li><li><code>__NSStackBlock__</code>类型的调用了copy就是<code>__NSMallocBlock__</code>类型</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Global：没有访问auto变量</span></span><br><span class="line"><span class="keyword">void</span> (^block1)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"block1---------"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Stack：访问了auto变量</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">void</span> (^block2)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"block2---------%d"</span>, age);</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@ %@"</span>, [block1 <span class="keyword">class</span>], [block2 <span class="keyword">class</span>], [[block2 <span class="keyword">copy</span>] <span class="keyword">class</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// MRC下手动调用copy，ARC下编译器会根据情况自动将栈上的block复制到对堆上。</span></span><br><span class="line"><span class="comment">// 打印结果 __NSGlobalBlock__  __NSStackBlock__  __NSMallocBlock__</span></span><br></pre></td></tr></table></figure><p>每一种类型的block调用copy后的结果如下所示:</p><p><img src="http://wx3.sinaimg.cn/mw690/006zcW7Ely1ftl2qoc0mpj30wg060439.jpg" alt=""></p><h3 id="block的copy问题"><a href="#block的copy问题" class="headerlink" title="block的copy问题"></a>block的copy问题</h3><p>在ARC环境下，编译器会根据情况自动将栈上的block复制到堆上，比如以下情况</p><ul><li>block作为函数返回值时</li><li>将block赋值给__strong指针时</li><li>block作为Cocoa API中方法名含有usingBlock的方法参数时</li><li>block作为GCD API的方法参数时</li></ul><p><strong>MRC下block属性的建议写法</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="keyword">void</span> (^block)(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure><p><strong>ARC下block属性的建议写法</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="keyword">void</span> (^block)(<span class="keyword">void</span>);<span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="keyword">void</span> (^block)(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure><p><strong>当block内部访问了对象类型的auto变量时</strong>  </p><ul><li>如果block是在栈上，将不会对auto变量产生强引用</li></ul><p><strong>如果block被拷贝到堆上</strong>  </p><ul><li>会调用block内部的<code>copy</code>函数  </li><li>copy函数内部会调用<code>_Block_object_assign</code>函数</li><li><code>_Block_object_assign</code>函数会根据auto变量的修饰符<code>（__strong、__weak、__unsafe_unretained）</code>做出相应的操作，形成强引用（retain）或者弱引用</li></ul><p><strong>如果block从堆上移除</strong>  </p><ul><li>会调用block内部的dispose函数  </li><li><code>dispose</code>函数内部会调用<code>_Block_object_dispose</code>函数  </li><li><code>_Block_object_dispose</code>函数会自动释放引用的auto变量（release）</li></ul><p><img src="http://wx3.sinaimg.cn/mw690/006zcW7Ely1ftlw3e2m53j30s20620wi.jpg" alt=""></p><p><strong>TIPS:__weak问题解决</strong>  </p><p>在使用clang转换OC为C++代码时，可能会遇到以下问题  </p><ul><li><code>cannot create __weak reference in file using manual reference</code></li></ul><p>解决方案：支持ARC、指定运行时系统版本，比如   </p><ul><li><code>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc -fobjc-arc -fobjc-runtime=ios-8.0.0 main.m</code></li></ul><h3 id="block修饰符"><a href="#block修饰符" class="headerlink" title="__block修饰符"></a>__block修饰符</h3><ul><li><code>__block</code>可以用于解决block内部无法修改auto变量值的问题</li><li><code>__block</code>不能修饰全局变量、静态变量（static）</li><li>编译器会将<code>__block</code>变量包装成一个对象</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__block <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line"><span class="keyword">struct</span> __block_impl impl;</span><br><span class="line"><span class="keyword">struct</span> __main_block_desc_0 *Desc;</span><br><span class="line">__Block_tyref_age_0 *age; <span class="comment">// by ref</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>block结构体里面的age指针指向下面这个结构体（包装的对象）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> __Block_byref_age_0 &#123;</span><br><span class="line"><span class="keyword">void</span> *__isa;</span><br><span class="line">__Block_byref_age_0 *__forwarding; <span class="comment">//指向自己</span></span><br><span class="line"><span class="keyword">int</span> __flags;</span><br><span class="line"><span class="keyword">int</span> __size;</span><br><span class="line"><span class="keyword">int</span> age; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个结构体里面的age存储着age的真正的值。</p><p><img src="http://wx4.sinaimg.cn/mw690/006zcW7Ely1ftmasb8wokj30lr09adi4.jpg" alt=""></p><p><strong>__block的内存管理</strong></p><ul><li><p>当block在栈上时，并不会对<code>__block</code>变量产生强引用</p></li><li><p>当block被copy到堆时</p><ul><li>会调用block内部的copy函数  </li><li>copy函数内部会调用<code>_Block_object_assign</code>函数  </li><li><code>_Block_object_assign</code>函数会对<code>__block</code>变量形成强引用（retain）</li></ul></li></ul><p><img src="http://wx4.sinaimg.cn/mw690/006zcW7Ely1ftn0rknla6j30ny09rjux.jpg" alt=""></p><p><img src="http://wx2.sinaimg.cn/mw690/006zcW7Ely1ftn0rofks5j30ow09rtcn.jpg" alt=""></p><ul><li><p>当block从堆中移除时</p><ul><li>会调用block内部的dispose函数  </li><li>dispose函数内部会调用<code>_Block_object_dispose</code>函数  </li><li><code>_Block_object_dispose</code>函数会自动释放引用的<code>__block</code>变量（release）</li></ul></li></ul><p><img src="http://wx1.sinaimg.cn/mw690/006zcW7Ely1ftn0rruvo4j30mh0acdij.jpg" alt=""></p><p><img src="http://wx4.sinaimg.cn/mw690/006zcW7Ely1ftn0s90g3gj30tn0aywk6.jpg" alt=""> </p><ul><li><code>__block</code>的<code>__forwarding</code>指针</li></ul><p><img src="http://wx4.sinaimg.cn/mw690/006zcW7Ely1ftu1x7ik3oj30f10a0mz0.jpg" width="50%" height="50%" align="left"><br><img src="http://wx4.sinaimg.cn/mw690/006zcW7Ely1ftu1xciqd2j30ut0cltea.jpg" alt=""> </p><p><strong>对象类型的<code>auto</code>变量、<code>__block</code>变量</strong></p><ul><li><p>当block在栈上时，对它们都不会产生强引用</p></li><li><p>当block拷贝到堆上时，都会通过copy函数来处理它们  </p><ul><li><p><code>__block</code>变量（假设变量名叫做a）</p><ul><li><code>_Block_object_assign((void*)&amp;dst-&gt;a, (void*)src-&gt;a, 8/*BLOCK_FIELD_IS_BYREF*/);</code></li></ul></li><li><p>对象类型的<code>auto</code>变量（假设变量名叫做p）</p><ul><li><code>_Block_object_assign((void*)&amp;dst-&gt;p,(void*)src-&gt;p, 3/*BLOCK_FIELD_IS_OBJECT*/);</code></li></ul></li></ul></li><li><p>当block从堆上移除时，都会通过dispose函数来释放它们</p><ul><li><p><code>__block</code>变量（假设变量名叫做a）</p><ul><li><code>_Block_object_dispose((void*)src-&gt;a, 8/*BLOCK_FIELD_IS_BYREF*/);</code></li></ul></li><li><p>对象类型的<code>auto</code>变量（假设变量名叫做p）</p><ul><li><code>_Block_object_dispose((void*)src-&gt;p, 3/*BLOCK_FIELD_IS_OBJECT*/);</code></li></ul></li></ul></li></ul><p><img src="http://wx3.sinaimg.cn/mw690/006zcW7Ely1ftv5kyrwpsj30uq04ago4.jpg" alt=""></p><p><strong>被__block修饰的对象类型</strong></p><ul><li><p>当<code>__block</code>变量在栈上时，不会对指向的对象产生强引用</p></li><li><p>当<code>__block</code>变量被copy到堆时  </p><ul><li>会调用<code>__block</code>变量内部的copy函数  </li><li>copy函数内部会调用<code>_Block_object_assign</code>函数</li><li><code>_Block_object_assign</code>函数会根据所指向对象的修饰符<code>（__strong、__weak、__unsafe_unretained）</code>做出相应的操作，形成强引用（retain）或者弱引用（注意：这里仅限于ARC时会retain，MRC时不会retain）</li></ul></li><li><p>如果<code>__block</code>变量从堆上移除  </p><ul><li>会调用<code>__block</code>变量内部的dispose函数</li><li>dispose函数内部会调用<code>_Block_object_dispose</code>函数</li><li><code>_Block_object_dispose</code>函数会自动释放指向的对象（release）</li></ul></li></ul><h3 id="循环引用问题"><a href="#循环引用问题" class="headerlink" title="循环引用问题"></a>循环引用问题</h3><p><img src="http://wx4.sinaimg.cn/mw690/006zcW7Ely1ftv5unqupyj30ol0dun30.jpg" alt=""></p><p><strong>解决循环引用问题 - ARC</strong></p><ul><li><p>用<code>__weak、__unsafe_unretained</code>解决</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.block = ^&#123;</span><br><span class="line">printf(<span class="string">"%p"</span>,weakSelf);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> weakSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.block = ^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">"%p"</span>,weakSelf);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><pre><code>![](http://wx1.sinaimg.cn/mw690/006zcW7Ely1ftv60mrzufj30ee06ndhd.jpg)</code></pre><ul><li><p>用<code>__block</code>解决（必须要调用block）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__block <span class="keyword">id</span> weakSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.block = ^&#123;</span><br><span class="line">printf(<span class="string">"%p"</span>,weakSelf);</span><br><span class="line">weakSelf = <span class="literal">nil</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">self</span>.block();</span><br></pre></td></tr></table></figure><p><img src="http://wx2.sinaimg.cn/mw690/006zcW7Ely1ftv60qashij30gd084dih.jpg" alt=""><br><img src="http://wx4.sinaimg.cn/mw690/006zcW7Ely1ftv60tjwoaj30hd086mze.jpg" alt=""></p></li></ul><p><strong>解决循环引用问题 - MRC</strong></p><ul><li><p>用<code>__unsafe_unretained</code>解决</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> weakSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.block = ^&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">"%p"</span>,weakSelf);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>用<code>__block</code>解决 (当__block变量被copy到堆时，MRC下不会retain)</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__block <span class="keyword">id</span> weakSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.block = ^&#123;</span><br><span class="line">printf(<span class="string">"%p"</span>,weakSelf);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Block相关随笔-查看OC的block相关源码做的笔记&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="Block" scheme="http://yoursite.com/tags/Block/"/>
    
  </entry>
  
  <entry>
    <title>iOS分类“添加成员变量”</title>
    <link href="http://yoursite.com/2018/07/23/iOS%E5%88%86%E7%B1%BB%E2%80%9C%E6%B7%BB%E5%8A%A0%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E2%80%9D/"/>
    <id>http://yoursite.com/2018/07/23/iOS分类“添加成员变量”/</id>
    <published>2018-07-23T02:33:32.000Z</published>
    <updated>2018-07-24T06:34:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>默认情况下，因为分类底层结构的限制，不能添加成员变量到分类中。但可以通过关联对象来间接实现。<br><a id="more"></a></p></blockquote><h3 id="Category的底层结构"><a href="#Category的底层结构" class="headerlink" title="Category的底层结构"></a>Category的底层结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">category_t</span> &#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">class_t</span> *<span class="title">cls</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">method_list_t</span> *<span class="title">instance_methods</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">method_list_t</span> *<span class="title">class_methods</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">protocol_list_t</span> *<span class="title">protocols</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">prop_list_t</span> *<span class="title">properties</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为底层结构体里面没有成员变量的存储列表，因此默认分类无法添加成员变量。有属性列表，但是给分类添加属性时，只会生成属性setter个getter方法声明不会生成方法的实现，和成员变量。</p><h3 id="通过关联对象间接实现添加成员变量"><a href="#通过关联对象间接实现添加成员变量" class="headerlink" title="通过关联对象间接实现添加成员变量"></a>通过关联对象间接实现添加成员变量</h3><ul><li><p>关联对象提供了以下API</p><ul><li><p>添加关联对象</p>   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_setAssociatedObject</span><span class="params">(id object, <span class="keyword">const</span> <span class="keyword">void</span> * key,                            id value, objc_AssociationPolicy policy)</span></span></span><br></pre></td></tr></table></figure></li><li><p>获得关联对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">id <span class="title">objc_getAssociatedObject</span><span class="params">(id object, <span class="keyword">const</span> <span class="keyword">void</span> * key)</span></span></span><br></pre></td></tr></table></figure></li><li><p>移除所有的关联对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_removeAssociatedObjects</span><span class="params">(id object)</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="key的常见用法"><a href="#key的常见用法" class="headerlink" title="key的常见用法"></a>key的常见用法</h3><ul><li><p>添加一个属性</p>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HQPerson</span> (<span class="title">Test</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="keyword">int</span> c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></li><li><p>用法一</p> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> HQAgeKey; <span class="comment">// 全局变量加上static只能在此文件中访问</span></span><br><span class="line">  </span><br><span class="line">- (<span class="keyword">void</span>)setAge:(<span class="keyword">int</span>)age</span><br><span class="line">&#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;HQAgeKey, @(weight), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>)age</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, &amp;HQAgeKey) intValue];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用法二</p>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#define HQAgeKey @<span class="meta-string">"age"</span></span></span><br><span class="line"> </span><br><span class="line">- (<span class="keyword">void</span>)setAge:(<span class="keyword">int</span>)age</span><br><span class="line">&#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, HQAgeKey, @(weight), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>)age</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, HQAgeKey) intValue];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用法三</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">- (<span class="keyword">void</span>)setAge:(<span class="keyword">int</span>) age</span><br><span class="line">&#123;</span><br><span class="line">  objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(age), @(age), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>)age</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// _cmd == @selector(age)</span></span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) intValue];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="关联对象的原理"><a href="#关联对象的原理" class="headerlink" title="关联对象的原理"></a>关联对象的原理</h3><p>实现关联对象技术的核心对象有</p><ul><li>AssociationsManager</li><li>AssociationsHashMap</li><li>ObjectAssociationMap</li><li>ObjcAssociation</li></ul><p>objc4源码解读：<code>objc-references.mm</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> AssociationsManager &#123;</span><br><span class="line"><span class="keyword">static</span> AssociationsHashMap *_map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联对象管理器中有个<code>AssociationsHashMap</code>字典。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> AssociationsHashMap : public unordered_map&lt;disguised_ptr_t, ObjectAssociationMap&gt;</span><br></pre></td></tr></table></figure><p><code>AssociationsHashMap</code>的key为<code>disguised_ptr_t</code>value为<code>ObjectAssociationMap</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> ObjectAssociationMap : public std::map&lt;<span class="keyword">void</span> *, ObjectAssociation&gt;</span><br></pre></td></tr></table></figure><p><code>ObjectAssociationMap</code>中的key<code>void *</code>value为<code>ObjectAssociation</code>,<code>ObjectAssociation</code>中存储着关联对象的信息。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> ObjectAssociation &#123;</span><br><span class="line">uintptr_t _polic;</span><br><span class="line"><span class="keyword">id</span> _value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关联对象并不是存储在被关联对象本身内存中</li><li>关联对象存储在全局的统一的一个AssociationsManager中</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;默认情况下，因为分类底层结构的限制，不能添加成员变量到分类中。但可以通过关联对象来间接实现。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="Category" scheme="http://yoursite.com/tags/Category/"/>
    
  </entry>
  
  <entry>
    <title>OC对象，isa指针相关随笔</title>
    <link href="http://yoursite.com/2018/06/19/OC%E5%AF%B9%E8%B1%A1%EF%BC%8Cisa%E6%8C%87%E9%92%88%E7%9B%B8%E5%85%B3%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2018/06/19/OC对象，isa指针相关随笔/</id>
    <published>2018-06-19T09:00:50.000Z</published>
    <updated>2018-07-18T01:49:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>iOS零散知识随笔记录<br><a id="more"></a></p></blockquote><h3 id="一个NSObject对象占用多少内存？"><a href="#一个NSObject对象占用多少内存？" class="headerlink" title="一个NSObject对象占用多少内存？"></a>一个NSObject对象占用多少内存？</h3><p><em>系统分配了16个字节给NSObject对象(通过malloc_size函数获得)，但NSObject对象内部只使用了8个字节的空间(64bit环境下，可以通过class_getInstanceSize函数获得)。</em></p><ul><li><p>Object-C -&gt; C\C++ -&gt; 汇编语言 -&gt; 机器语言<br>OC的对象、类主要基于C\C++什么数据机构实现的？(结构体：结构体的内存地址为结构体里面第一个成员变量的地址)</p></li><li><p>ls -l 查看文件个数<br>clang -rewrite-objc main.m -o main.cpp (c plus plus) [3.6M]</p><ul><li>Clang是一个C++编写、基于LLVM、发布于LLVM BSD许可证下的C/C++/Objective-C/Objective-C++编译器。</li><li>LLVM是构架编译器(compiler)的框架系统，以C++编写而成，用于优化以任意程序语言编写的程序的编译时间(compile-time)、链接时间(link-time)、运行时间(run-time)以及空闲时间(idle-time)，对开发者保持开放，并兼容已有脚本。</li></ul></li><li><p>编译想要的对应的结构的C++代码<br>架构 模拟器(i386)、32bit(armv7)、64bit(arm64)<br>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m -o main-arm64.cpp [1.4M]</p></li><li><p>64bit 指针8个字节 32bit 指针4个字节<br>runtime方法<code>class_getInstanceSize([NSObject class])</code>获取一个类的实例的大小。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">NSObject *obj = [[NSObject alloc] init];</span><br><span class="line"></span><br><span class="line">// 获得NSObject实例对象的成员变量所占用的大小 &gt;&gt; 8</span><br><span class="line">// class_getInstanceSize返回的是对齐后的大小</span><br><span class="line">NSLog(@&quot;%zd&quot;, class_getInstanceSize([NSObject class]));</span><br><span class="line">      </span><br><span class="line">// 获得obj指针所指向内存的大小 &gt;&gt; 16</span><br><span class="line">NSLog(@&quot;%zd&quot;, malloc_size((__bridge const void *)obj));</span><br><span class="line"></span><br><span class="line">/* 一个OC对象分配了16字节空间，实际有用的空间为8字节</span><br><span class="line">if (size &lt; 16) size = 16; (allocWithZone中代码)*/</span><br></pre></td></tr></table></figure></li><li><p>苹果开源 <code>opensource.apple.com/tarballs/</code></p></li><li><p>同一个结构体里面的成员的内存是连续的。</p></li><li><p>结构体和数组的地址等于他们里面最前面的成员的地址。</p></li><li><p>内存大小端模式（iOS为小端模式）<br><img src="https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=90fcc58f97529822113e3191b6a310ae/b2de9c82d158ccbfba5e4c721ed8bc3eb035419c.jpg" alt=""></p></li><li><p>内存对齐：结构体的大小必须是最大成员大小的倍数。</p></li><li><p>int 4B，double、long 8B，字符串、指针 8B。</p></li><li><p>创建一个实例对象，至少需要多少内存？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;objc/runtime.h&gt;</span><br><span class="line">class_getInstanceSize([NSObject class]);</span><br></pre></td></tr></table></figure></li><li><p>创建一个实例对象，实际分配了多少内存？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;malloc/malloc.h&gt;</span><br><span class="line">malloc_size((__bridge const void *)obj);</span><br></pre></td></tr></table></figure></li><li><p>sizeof不是一个函数，它是一个运算符，在编译的时候就计算出结果。比如sizeof(int) 编译时直接就变成 4 ，类似于宏定义。</p></li><li><p>OC对象的分类</p><ul><li>instance对象（实例对象）</li><li>class对象（类对象）<ul><li>每个类在内存中有且只有一个类对象</li><li>object_getClass(object1);</li><li>[NSObject class]; class方法只返回类对象</li></ul></li><li>meta-class对象（元类对象）<ul><li>将类对象传入 </li><li>object_getClass([NSObject class]); </li></ul></li></ul></li><li><p>object-getClass([NSObject class]); 可以返回类对象也可以返回元类对象。<br>objc-getClass(const char *aClassName); 只返回类对象。</p></li><li><p>copy 一个对象返回的内存是不是同一块取决于 copyWithZoon方法的实现，<code>return self;</code>则是同一块内存，<br><code>return [[Person alloc] init];</code>则不是同一块内存。</p></li></ul><h3 id="对象的isa指针指向哪里？"><a href="#对象的isa指针指向哪里？" class="headerlink" title="对象的isa指针指向哪里？"></a>对象的isa指针指向哪里？</h3><ul><li><p>对象方法的本质 <em>实际是给对象发送消息</em> (runtime消息机制)<br>[person personInstanceMethod];==&gt;<br>objc_msgSend(person,@selector(personInstanceMethod)); </p></li><li><p>实例对象的isa指向类对象，类对象的isa指向元类对象。<br>实例对象方法在类对象里面，类对象方法在元类对象里面。通过isa连接。</p></li><li><p>类对象里面的superclass指针指向父类对象。比如实例对象调用父类的实例对象方法，先通过isa找到自己的类对象，再通过类对象的superclass指针找到父类对象，在调用父类对象里面得到实例对象的方法。</p></li><li><p>类对象的元类对象里面的superclass指向类对象的父类的元类对象。调用类方法 类对象先通过isa找到自己的元类对象，再通过元类对象的superclass找到父类的元类对象。</p></li><li><p>实例对象里面的isa的值，就是类对象的地址值。(从64bit开始，isa需要进行一次位运算，才能计算出类对象真实的地址[isa &amp; ISA_MASK])</p></li><li><p>总结</p><ul><li>instance的isa指向class</li><li>class的isa指向meta-class</li><li>meta-class的isa指向<em>基类(NSObject)</em>的meta-class</li><li>class的superclass指向父类的class。<em>(如果没有父类指向nil，基类的类对象的superclass指向nil)</em></li><li>mete-class的superclass指向父类的meta-class。<em>(基类的meta-class的superclass指向基类的class)</em></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;iOS零散知识随笔记录&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Swift编解码</title>
    <link href="http://yoursite.com/2018/05/25/Swift%E7%BC%96%E8%A7%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2018/05/25/Swift编解码/</id>
    <published>2018-05-25T08:05:58.000Z</published>
    <updated>2018-05-25T08:28:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天来研究一下Swift的编解码。Swift 4.0 引入了Codable。Codable 是一种 混合类型，由 Decodable 和 Encodable 协议构成。<br><a id="more"></a></p></blockquote><h4 id="1-把Json文本解析成对象"><a href="#1-把Json文本解析成对象" class="headerlink" title="1.把Json文本解析成对象"></a>1.把Json文本解析成对象</h4><p>首先我们先创建一个模型，遵循<code>Decodable</code>协议：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>: <span class="title">Decodable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> sex: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Decodable</code>协议定义了一个初始化函数，使用<code>Decoder</code>对象初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init(from decoder: Decoder) throws</span><br></pre></td></tr></table></figure><p><code>Decoder</code>协议需要阐明将<code>Decodable</code>对象的 <em>表示</em> 解码成对象的要求。为了适应各种数据交换格式，解码器和编码器都使用名为 <em>容器</em>（container）的抽象。容器是用来存储值的，可以存储一个值也可以存储多个值，可以像字典一样有键去对应值，也可以像数组一样不需要键。</p><p>我们定义一个枚举来完成模型属性名称和容器的键之间的映射。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>: <span class="title">Decodable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> name</span><br><span class="line">        <span class="keyword">case</span> sex</span><br><span class="line">        <span class="keyword">case</span> age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来调用初始化方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">self</span>.name = <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .name)</span><br><span class="line">    <span class="keyword">self</span>.sex = <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .sex)</span><br><span class="line">    <span class="keyword">self</span>.age = <span class="keyword">try</span> container.decode(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个Json：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "</span>name<span class="string">": "</span><span class="type">HQ</span><span class="string">",</span></span><br><span class="line"><span class="string">            "</span>sex<span class="string">": "</span><span class="type">Man</span><span class="string">",</span></span><br><span class="line"><span class="string">            "</span>age<span class="string">": 18,</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span>.data(using: .utf8)!</span><br></pre></td></tr></table></figure><p>解码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> person = <span class="keyword">try</span>? decoder.decode(<span class="type">Person</span>.<span class="keyword">self</span>, from: json) &#123;</span><br><span class="line">    <span class="built_in">print</span>(person.name) <span class="comment">// HQ</span></span><br><span class="line">    <span class="built_in">print</span>(person.sex)  <span class="comment">// Man</span></span><br><span class="line">    <span class="built_in">print</span>(person.age)  <span class="comment">// 18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-把对象还原成Json"><a href="#2-把对象还原成Json" class="headerlink" title="2.把对象还原成Json"></a>2.把对象还原成Json</h4><p>对象还原成Json，要遵循<code>Encodable</code>协议。<br>它定义了一个方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(to encoder: Encoder)</span></span> <span class="keyword">throws</span></span><br></pre></td></tr></table></figure><p><code>Encoder</code>对象都可以创建遵从了<code>Encodable</code>协议类型的表示。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(to encoder: Encoder)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line"><span class="keyword">var</span> container = encoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</span><br><span class="line">   <span class="keyword">try</span> container.encode(<span class="keyword">self</span>.name, forKey: .name)</span><br><span class="line">   <span class="keyword">try</span> container.encode(<span class="keyword">self</span>.sex, forKey: .sex)</span><br><span class="line">   <span class="keyword">try</span> container.encode(<span class="keyword">self</span>.age, forKey: .age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> person = <span class="keyword">try</span>? decoder.decode(<span class="type">Person</span>.<span class="keyword">self</span>, from: json) &#123;</span><br><span class="line">    <span class="built_in">print</span>(person.name) <span class="comment">// HQ</span></span><br><span class="line">    <span class="built_in">print</span>(person.sex)  <span class="comment">// Man</span></span><br><span class="line">    <span class="built_in">print</span>(person.age)  <span class="comment">// 18</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">let</span> encoder = <span class="type">JSONEncoder</span>()</span><br><span class="line">    encoder.outputFormatting = .prettyPrinted</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> personJson = <span class="keyword">try</span>? encoder.encode(person) &#123;</span><br><span class="line">       <span class="built_in">print</span>(<span class="type">String</span>(data: personJson, encoding: .utf8)!)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"HQ1"</span>,</span><br><span class="line">  <span class="string">"sex"</span> : <span class="string">"Man"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-精简代码"><a href="#3-精简代码" class="headerlink" title="3.精简代码"></a>3.精简代码</h4><p>删除模型中的代码，只留下如下代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> sex: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行程序，发现编解码功能依然可以成功！<br>Swift自动整合了<code>Decodable</code> 和 <code>Encodable</code>。<code>Codable</code>完成了两个过程： 一个是完成 Decodable 相关的工作，另一个是处理 Encodable 相关的。<br>也就是说我们的模型只需要使用<code>Codable</code>协议，模型中的属性会自动尊从<code>Codable</code>协议。</p><h4 id="4-复杂点的Json"><a href="#4-复杂点的Json" class="headerlink" title="4.复杂点的Json"></a>4.复杂点的Json</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "</span>persons<span class="string">": [</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    "</span>name<span class="string">": "</span><span class="type">HQ1</span><span class="string">",</span></span><br><span class="line"><span class="string">                    "</span>sex<span class="string">": "</span><span class="type">Man</span><span class="string">",</span></span><br><span class="line"><span class="string">                    "</span>age<span class="string">": 18,</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    "</span>name<span class="string">": "</span><span class="type">HQ2</span><span class="string">",</span></span><br><span class="line"><span class="string">                    "</span>sex<span class="string">": "</span><span class="type">Woman</span><span class="string">",</span></span><br><span class="line"><span class="string">                    "</span>age<span class="string">": 20,</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span>.data(using: .utf8)!</span><br></pre></td></tr></table></figure><p>编解码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">let</span> keyedPersons = <span class="keyword">try</span>! decoder.decode([<span class="type">String</span>: [<span class="type">Person</span>]].<span class="keyword">self</span>, from: json)</span><br><span class="line"><span class="keyword">let</span> persons = keyedPersons[<span class="string">"persons"</span>]</span><br><span class="line"><span class="built_in">print</span>(persons!)</span><br><span class="line">            </span><br><span class="line"><span class="keyword">let</span> encoder = <span class="type">JSONEncoder</span>()</span><br><span class="line">encoder.outputFormatting = .prettyPrinted</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> personJson = <span class="keyword">try</span>? encoder.encode(keyedPersons) &#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="type">String</span>(data: personJson, encoding: .utf8)!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Swift 4 的一个新特性：条件一致性。<br>如果 <code>Array</code> 和 <code>Dictionary</code> 包含的 <code>KeyType</code> 和 <code>ValueType</code> 都遵从 <code>Decodable</code> 协议，那么这样的数组或字典本身也就遵从了 <code>Decodable</code> 协议：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift/stdlib/public/core/Codable.swift.gyb</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> : <span class="title">Decodable</span> <span class="title">where</span> <span class="title">Element</span> : <span class="title">Decodable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dictionary</span> : <span class="title">Decodable</span> <span class="title">where</span> <span class="title">Key</span> : <span class="title">Decodable</span>, </span></span><br><span class="line"><span class="class">                                       <span class="title">Value</span> : <span class="title">Decodable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化一下：<br>新建一个模型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Persons</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> persons: [<span class="type">Person</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编解码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> keyedPersons = <span class="keyword">try</span>? decoder.decode(<span class="type">Persons</span>.<span class="keyword">self</span>, from: json) &#123;</span><br><span class="line">    <span class="keyword">let</span> persons = keyedPersons.persons</span><br><span class="line">    <span class="built_in">print</span>(persons)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">let</span> encoder = <span class="type">JSONEncoder</span>()</span><br><span class="line">    encoder.outputFormatting = .prettyPrinted</span><br><span class="line"><span class="comment">//    if let personJson = try? encoder.encode(keyedPersons) &#123;</span></span><br><span class="line"><span class="comment">//       print(String(data: personJson, encoding: .utf8)!)</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> personJson = <span class="keyword">try</span>? encoder.encode(persons.first) &#123;</span><br><span class="line">       <span class="built_in">print</span>(<span class="type">String</span>(data: personJson, encoding: .utf8)!)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/kHeQing/HQCodable" target="_blank" rel="noopener">demo下载</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天来研究一下Swift的编解码。Swift 4.0 引入了Codable。Codable 是一种 混合类型，由 Decodable 和 Encodable 协议构成。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="编解码" scheme="http://yoursite.com/tags/%E7%BC%96%E8%A7%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Swift读书笔记</title>
    <link href="http://yoursite.com/2018/05/09/Swift%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/05/09/Swift读书笔记/</id>
    <published>2018-05-09T06:56:03.000Z</published>
    <updated>2018-05-10T03:31:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>读 王巍 (onevcat). “Swifter - Swift 必备 Tips (第三版)” 笔记<br><a id="more"></a></p></blockquote><h4 id="1-协议的方法声明为什么要使用mutating修饰？"><a href="#1-协议的方法声明为什么要使用mutating修饰？" class="headerlink" title="1.协议的方法声明为什么要使用mutating修饰？"></a>1.协议的方法声明为什么要使用mutating修饰？</h4><p>Swift 的 mutating 关键字修饰方法是为了能在该方法中修改 struct 或是 enum 的变量，所以如果你没在协议方法里写 mutating 的话，别人如果用 struct 或者 enum 来实现这个协议的话，就不能在方法里改变自己的变量了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> numberOfWheels: <span class="type">Int</span> &#123;<span class="keyword">get</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">UIColor</span> &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeColor</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyCar</span>: <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> numberOfWheels = <span class="number">4</span></span><br><span class="line">    <span class="keyword">var</span> color = <span class="type">UIColor</span>.blue</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeColor</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 因为 `color` 的类型是 `UIColor`，这里直接写 .red 就足以推断类型了</span></span><br><span class="line">        color = .red</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-的实现原理"><a href="#2-的实现原理" class="headerlink" title="2. ?? 的实现原理"></a>2. ?? 的实现原理</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> level: <span class="type">Int</span>?</span><br><span class="line"><span class="keyword">var</span> startLevel = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currentLevel = level ?? startLevel</span><br></pre></td></tr></table></figure><p>在这个例子中我们没有设置过 level，因此最后 startLevel 被赋值给了 currentLevel。如果我们充满好奇心地点进 ?? 的定义，可以看到 ?? 有两种版本：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">T</span>?) -&gt; <span class="type">T</span>?</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span></span><br></pre></td></tr></table></figure><p>在这里我们的输入满足的是后者，虽然表面上看 startLevel 只是一个 Int，但是其实在使用时它被自动封装成了一个 () -&gt; Int，有了这个提示，我们不妨来猜测一下 ?? 的实现吧： </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> <span class="keyword">optional</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Some</span>(<span class="keyword">let</span> value):</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">None</span>:</span><br><span class="line">            <span class="keyword">return</span> defaultValue()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能你会有疑问，为什么这里要使用 autoclosure，直接接受 T 作为参数并返回不行么，为何要用 () -&gt; T 这样的形式包装一遍，岂不是画蛇添足？其实这正是 autoclosure 的一个最值得称赞的地方。如果我们直接使用 T，那么就意味着在 ?? 操作符真正取值之前，我们就必须准备好一个默认值传入到这个方法中，一般来说这不会有很大问题，但是如果这个默认值是通过一系列复杂计算得到的话，可能会成为浪费 – 因为其实如果 optional 不是 nil 的话，我们实际上是完全没有用到这个默认值，而会直接返回 optional 解包后的值的。这样的开销是完全可以避免的，方法就是将默认值的计算推迟到 optional 判定为 nil 之后。</p><p>就这样，我们可以巧妙地绕过条件判断和强制转换，以很优雅的写法处理对 Optional 及默认值的取值了。最后要提一句的是，@autoclosure 并不支持带有输入参数的写法，也就是说只有形如 () -&gt; T 的参数才能使用这个特性进行简化。另外因为调用者往往很容易忽视 @autoclosure 这个特性，所以在写接受 @autoclosure 的方法时还请特别小心，如果在容易产生歧义或者误解的时候，还是使用完整的闭包写法会比较好。</p><h4 id="3-创建新的操作符"><a href="#3-创建新的操作符" class="headerlink" title="3.创建新的操作符"></a>3.创建新的操作符</h4><p>需要先对其进行声明，告诉编译器这个符号其实是一个操作符。添加如下代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">precedencegroup <span class="type">DotProductPrecedence</span> &#123;</span><br><span class="line">    <span class="keyword">associativity</span>: <span class="keyword">none</span> <span class="comment">// 定义了结合律，即如果多个同类的操作符顺序出现的计算顺序。</span></span><br><span class="line">    higherThan: <span class="type">MultiplicationPrecedence</span> <span class="comment">// 定义运算的优先级</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// infix 表示要定义的是一个中位操作符，即前后都是输入</span></span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> +*: <span class="type">DotProductPrecedence</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func +* (left: Vector2D, right: Vector2D) -&gt; Double &#123;</span><br><span class="line">    return left.x * right.x + left.y * right.y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重载操作符不需要声明。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;读 王巍 (onevcat). “Swifter - Swift 必备 Tips (第三版)” 笔记&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Swift inout关键字的使用</title>
    <link href="http://yoursite.com/2018/05/08/Swift%20inout%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/05/08/Swift inout关键字的使用/</id>
    <published>2018-05-08T05:58:42.000Z</published>
    <updated>2018-05-09T03:17:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天突然看到inout关键字so了解了一下其用法<br><a id="more"></a></p></blockquote><p>inout的作用是引用类型传递。与其对应的是值类型传递。</p><h4 id="1-值类型传递"><a href="#1-值类型传递" class="headerlink" title="1.值类型传递"></a>1.值类型传递</h4><p>值类型与引用类型相对，值类型的数据特征是，每一个内存实例都会有一份数据copy。在swift语言中，用<code>struct</code>定义的类型都是值类型，这包括了基本数据类型<code>（Int，String，Double,Float)</code>,集合类型<code>（Array，Dictionary，Set）</code>等。值类型在赋值和传递的过程中，会表现出copy数据的性质。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> point1 = <span class="type">Point</span>()</span><br><span class="line"><span class="keyword">var</span> point2 = point1</span><br></pre></td></tr></table></figure><p>我们定义两个值类型的变量point1、point2，当我们使用point1对point2进行赋值的时候，理论上编译器会创建point2对象，并将point1的数据进行一次copy赋值给point2。如果我们修改了point2的内容，我们会发现point1的内容并没有发生变化。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">point2.x = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(point2.x) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">print</span>(point1.x) <span class="comment">// 0, 对point2的修改不会影响point1的内容</span></span><br></pre></td></tr></table></figure><h4 id="2-引用类型传递"><a href="#2-引用类型传递" class="headerlink" title="2.引用类型传递"></a>2.引用类型传递</h4><p>值类型在传递的过程中会进行数据的copy，那么显而易见的是下面改变x的值是不会成功的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeX</span><span class="params">(x: Int)</span></span> &#123;</span><br><span class="line">    x + = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeX(x)</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">// 10 x的值不会发生改变</span></span><br></pre></td></tr></table></figure><p>如果我们希望x的值可以被改变，那么我们必须使用引用的方式来传递x。这时候我们就需要使用inout，当我们使用inout的时候，编译器不论当前struct的存放状态如何，都一定会把结构体放入一个连续的内存空间中，并将地址作为参数进行传递。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeX</span><span class="params">(x: inOut Int)</span></span> &#123; <span class="comment">// swift3.0改变了inOut修饰符的位置</span></span><br><span class="line">    x + = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeX(x)</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">// 20 x的值发生了改变</span></span><br></pre></td></tr></table></figure><h3 id="补充修正👇喵神说的："><a href="#补充修正👇喵神说的：" class="headerlink" title="补充修正👇喵神说的："></a>补充修正👇喵神说的：</h3><p>“如果你对 Swift 的值类型和引用类型的区别有所了解的话，会知道 Int 其实是一个值类型，我们并不能直接修改它的地址来让它指向新的值。那么这里这种类似 C 中取地址的 &amp; 符号到底做了额什么？对于值类型来说，inout 相当于在函数内部创建了一个新的值，然后在函数返回时将这个值赋给 &amp; 修饰的变量，这与引用类型的行为是不同的。”</p><p>摘录来自: 王巍 (onevcat). “Swifter - Swift 必备 Tips (第三版)”。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天突然看到inout关键字so了解了一下其用法&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="inout" scheme="http://yoursite.com/tags/inout/"/>
    
  </entry>
  
  <entry>
    <title>Swift同步网络请求(信号量)</title>
    <link href="http://yoursite.com/2018/05/04/Swift%E5%90%8C%E6%AD%A5%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82(%E4%BF%A1%E5%8F%B7%E9%87%8F)/"/>
    <id>http://yoursite.com/2018/05/04/Swift同步网络请求(信号量)/</id>
    <published>2018-05-04T01:58:16.000Z</published>
    <updated>2018-05-04T02:13:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天有个需求，我们的登录返回的Token两个小时过期，因此每次使用Token的时候需要检测Token是否过期，过期发请求刷新Token后，再使用Token进行数据请求。因为刷新Token使用的是异步请求，有时候还没有刷新完成，就进行了数据请求，导致请求数据失败。因此刷新Token的网络请求需改为同步请求。<br><a id="more"></a></p></blockquote><p>以前通过<code>NSURLConnection.sendSynchronousRequest()</code>方法能同步请求数据。从<code>iOS9</code>起，苹果废除<code>NSURLConnection</code>，使用<code>URLSession</code>代替 <code>NSURLConnection</code>。</p><p>使用<code>URLSession</code>进行同步请求，可以使用信号量。<br>创建一个默认值为0的信号量，在调用网络请求的异步方法后就之行<code>wait()</code>，因此这个方法会一直等待， 在网络请求的<code>block</code>返回时之行<code>signal()</code>，这时才代表这个方法结束阻塞，可以继续执行了。</p><p>Swift信号量操作如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建初始值为0的信号量，这时代表是红灯</span></span><br><span class="line"><span class="keyword">let</span> semaphore = <span class="type">DispatchSemaphore</span>(value: <span class="number">0</span>)</span><br><span class="line"><span class="comment">//让信号量 -1，比如默认值时0， wait()以后就变成了－1了，因此会等待</span></span><br><span class="line">semaphore.wait()</span><br><span class="line"><span class="comment">// 信号量+1，当&gt;0时就代表绿灯可以走了</span></span><br><span class="line">semaphore.signal()</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urlString:<span class="type">String</span> = <span class="type">NewLogin_BaseUrl</span> + <span class="type">Login</span>.refreshToken.path</span><br><span class="line"><span class="keyword">let</span> url = <span class="type">URL</span>(string:urlString)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> request = <span class="type">URLRequest</span>(url: url!)</span><br><span class="line">request.httpMethod = <span class="string">"POST"</span></span><br><span class="line">request.httpBody = <span class="string">"Refresh_token=<span class="subst">\(k_Refresh_token)</span>"</span>.data(using: .utf8)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建初始值为0的信号量</span></span><br><span class="line"><span class="keyword">let</span> semaphore = <span class="type">DispatchSemaphore</span>(value: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> session = <span class="type">URLSession</span>.shared</span><br><span class="line"><span class="keyword">let</span> dataTask = session.dataTask(with: request, completionHandler: &#123;(data, response, error) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">                                            </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data = data &#123;</span><br><span class="line">                </span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">let</span> result = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data, options: .allowFragments) &#123;</span><br><span class="line">                        </span><br><span class="line">       <span class="built_in">print</span>(result)                 </span><br><span class="line">                                        </span><br><span class="line">       <span class="keyword">guard</span> <span class="keyword">let</span> <span class="type">Tmodel</span>:<span class="type">YXNewLoginModel</span> = <span class="type">Mapper</span>&lt;<span class="type">YXNewLoginModel</span>&gt;().<span class="built_in">map</span>(<span class="type">JSON</span>:result <span class="keyword">as</span>! [<span class="type">String</span> : <span class="type">Any</span>]) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">if</span> <span class="type">Tmodel</span>.<span class="type">Success</span> == <span class="literal">true</span> &#123;</span><br><span class="line">                        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> content = <span class="type">Tmodel</span>.<span class="type">Content</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="type">Access_token</span> = content.<span class="type">Access_token</span>, <span class="keyword">let</span> <span class="type">Refresh_token</span> = content.<span class="type">Refresh_token</span> &#123;</span><br><span class="line">                            </span><br><span class="line">           <span class="keyword">if</span> <span class="type">Access_token</span> == <span class="string">"-1"</span> &#123;</span><br><span class="line">                                </span><br><span class="line">              <span class="type">HQ_rootVC</span>?.noticeOnlyText(<span class="string">"刷新Token出错 -1"</span>)</span><br><span class="line">                                </span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                </span><br><span class="line">              <span class="type">Uds</span>.<span class="keyword">set</span>(<span class="type">Access_token</span>, forKey: <span class="string">"k_Access_token"</span>)</span><br><span class="line">              <span class="type">Uds</span>.synchronize()</span><br><span class="line">              <span class="type">Uds</span>.<span class="keyword">set</span>(<span class="type">Refresh_token</span>, forKey: <span class="string">"k_Refresh_token"</span>)</span><br><span class="line">              <span class="type">Uds</span>.synchronize()</span><br><span class="line">                                </span><br><span class="line">              <span class="keyword">let</span> date = <span class="type">Date</span>()</span><br><span class="line">              <span class="type">Uds</span>.<span class="keyword">set</span>(date, forKey: <span class="string">"k_StartTime"</span>)</span><br><span class="line">              <span class="type">Uds</span>.synchronize()</span><br><span class="line">            &#125;</span><br><span class="line">                            </span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">HQ_rootVC</span>?.noticeOnlyText(<span class="string">"刷新Access_token出错"</span>)</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                </span><br><span class="line">          <span class="type">HQ_rootVC</span>?.noticeOnlyText(<span class="string">"刷新Access_token出错"</span>)</span><br><span class="line">          <span class="keyword">guard</span> <span class="keyword">let</span> error = error <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">          <span class="built_in">print</span>(error)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      semaphore.signal()</span><br><span class="line">            </span><br><span class="line">&#125;) <span class="keyword">as</span> <span class="type">URLSessionTask</span></span><br><span class="line">        </span><br><span class="line">dataTask.resume()</span><br><span class="line">        </span><br><span class="line"><span class="number">_</span> = semaphore.wait(timeout: <span class="type">DispatchTime</span>.distantFuture)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"刷新完毕！<span class="subst">\(k_Access_token)</span>"</span>)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="type">Content</span> =     &#123;</span><br><span class="line">        <span class="string">"Access_token"</span> = 5a74e75c69934c29bed444d9c932a0ac;</span><br><span class="line">        <span class="string">"Expires_in"</span> = <span class="number">7200</span>;</span><br><span class="line">        <span class="string">"Refresh_token"</span> = 3d88a290cce6475f8ab22d07c971a82f;</span><br><span class="line">        <span class="string">"Token_type"</span> = <span class="string">"&lt;null&gt;"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">Message</span> = <span class="string">""</span>;</span><br><span class="line">    <span class="type">Success</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">刷新完毕！5a74e75c69934c29bed444d9c932a0ac</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天有个需求，我们的登录返回的Token两个小时过期，因此每次使用Token的时候需要检测Token是否过期，过期发请求刷新Token后，再使用Token进行数据请求。因为刷新Token使用的是异步请求，有时候还没有刷新完成，就进行了数据请求，导致请求数据失败。因此刷新Token的网络请求需改为同步请求。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="信号量" scheme="http://yoursite.com/tags/%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
    
  </entry>
  
</feed>
