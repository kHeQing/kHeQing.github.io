<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HeQing</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-25T08:05:58.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HeQing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift编解码</title>
    <link href="http://yoursite.com/2018/05/25/Swift%E7%BC%96%E8%A7%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2018/05/25/Swift编解码/</id>
    <published>2018-05-25T08:05:58.000Z</published>
    <updated>2018-05-25T08:05:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天来研究一下Swift的编解码。Swift 4.0 引入了Codable。Codable 是一种 混合类型，由 Decodable 和 Encodable 协议构成。<br><a id="more"></a></p></blockquote><h4 id="1-把Json文本解析成对象"><a href="#1-把Json文本解析成对象" class="headerlink" title="1.把Json文本解析成对象"></a>1.把Json文本解析成对象</h4><p>首先我们先创建一个模型，遵循<code>Decodable</code>协议：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>: <span class="title">Decodable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> sex: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Decodable</code>协议定义了一个初始化函数，使用<code>Decoder</code>对象初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init(from decoder: Decoder) throws</span><br></pre></td></tr></table></figure><p><code>Decoder</code>协议需要阐明将<code>Decodable</code>对象的 <em>表示</em> 解码成对象的要求。为了适应各种数据交换格式，解码器和编码器都使用名为 <em>容器</em>（container）的抽象。容器是用来存储值的，可以存储一个值也可以存储多个值，可以像字典一样有键去对应值，也可以像数组一样不需要键。</p><p>我们定义一个枚举来完成模型属性名称和容器的键之间的映射。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>: <span class="title">Decodable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> name</span><br><span class="line">        <span class="keyword">case</span> sex</span><br><span class="line">        <span class="keyword">case</span> age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来调用初始化方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">self</span>.name = <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .name)</span><br><span class="line">    <span class="keyword">self</span>.sex = <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .sex)</span><br><span class="line">    <span class="keyword">self</span>.age = <span class="keyword">try</span> container.decode(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个Json：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "</span>name<span class="string">": "</span><span class="type">HQ</span><span class="string">",</span></span><br><span class="line"><span class="string">            "</span>sex<span class="string">": "</span><span class="type">Man</span><span class="string">",</span></span><br><span class="line"><span class="string">            "</span>age<span class="string">": 18,</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span>.data(using: .utf8)!</span><br></pre></td></tr></table></figure><p>解码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> person = <span class="keyword">try</span>? decoder.decode(<span class="type">Person</span>.<span class="keyword">self</span>, from: json) &#123;</span><br><span class="line">    <span class="built_in">print</span>(person.name) <span class="comment">// HQ</span></span><br><span class="line">    <span class="built_in">print</span>(person.sex)  <span class="comment">// Man</span></span><br><span class="line">    <span class="built_in">print</span>(person.age)  <span class="comment">// 18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-把对象还原成Json"><a href="#2-把对象还原成Json" class="headerlink" title="2.把对象还原成Json"></a>2.把对象还原成Json</h4><p>对象还原成Json，要遵循<code>Encodable</code>协议。<br>它定义了一个方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(to encoder: Encoder)</span></span> <span class="keyword">throws</span></span><br></pre></td></tr></table></figure><p><code>Encoder</code>对象都可以创建遵从了<code>Encodable</code>协议类型的表示。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(to encoder: Encoder)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line"><span class="keyword">var</span> container = encoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</span><br><span class="line">   <span class="keyword">try</span> container.encode(<span class="keyword">self</span>.name, forKey: .name)</span><br><span class="line">   <span class="keyword">try</span> container.encode(<span class="keyword">self</span>.sex, forKey: .sex)</span><br><span class="line">   <span class="keyword">try</span> container.encode(<span class="keyword">self</span>.age, forKey: .age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> person = <span class="keyword">try</span>? decoder.decode(<span class="type">Person</span>.<span class="keyword">self</span>, from: json) &#123;</span><br><span class="line">    <span class="built_in">print</span>(person.name) <span class="comment">// HQ</span></span><br><span class="line">    <span class="built_in">print</span>(person.sex)  <span class="comment">// Man</span></span><br><span class="line">    <span class="built_in">print</span>(person.age)  <span class="comment">// 18</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">let</span> encoder = <span class="type">JSONEncoder</span>()</span><br><span class="line">    encoder.outputFormatting = .prettyPrinted</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> personJson = <span class="keyword">try</span>? encoder.encode(person) &#123;</span><br><span class="line">       <span class="built_in">print</span>(<span class="type">String</span>(data: personJson, encoding: .utf8)!)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"HQ1"</span>,</span><br><span class="line">  <span class="string">"sex"</span> : <span class="string">"Man"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-精简代码"><a href="#3-精简代码" class="headerlink" title="3.精简代码"></a>3.精简代码</h4><p>删除模型中的代码，只留下如下代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>: <span class="title">Codable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> sex: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行程序，发现编解码功能依然可以成功！<br>Swift自动整合了<code>Decodable</code> 和 <code>Encodable</code>。<code>Codable</code>完成了两个过程： 一个是完成 Decodable 相关的工作，另一个是处理 Encodable 相关的。<br>也就是说我们的模型只需要使用<code>Codable</code>协议，模型中的属性会自动尊从<code>Codable</code>协议。</p><h4 id="4-复杂点的Json"><a href="#4-复杂点的Json" class="headerlink" title="4.复杂点的Json"></a>4.复杂点的Json</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "</span>persons<span class="string">": [</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    "</span>name<span class="string">": "</span><span class="type">HQ1</span><span class="string">",</span></span><br><span class="line"><span class="string">                    "</span>sex<span class="string">": "</span><span class="type">Man</span><span class="string">",</span></span><br><span class="line"><span class="string">                    "</span>age<span class="string">": 18,</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    "</span>name<span class="string">": "</span><span class="type">HQ2</span><span class="string">",</span></span><br><span class="line"><span class="string">                    "</span>sex<span class="string">": "</span><span class="type">Woman</span><span class="string">",</span></span><br><span class="line"><span class="string">                    "</span>age<span class="string">": 20,</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span>.data(using: .utf8)!</span><br></pre></td></tr></table></figure><p>编解码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">let</span> keyedPersons = <span class="keyword">try</span>! decoder.decode([<span class="type">String</span>: [<span class="type">Person</span>]].<span class="keyword">self</span>, from: json)</span><br><span class="line"><span class="keyword">let</span> persons = keyedPersons[<span class="string">"persons"</span>]</span><br><span class="line"><span class="built_in">print</span>(persons!)</span><br><span class="line">            </span><br><span class="line"><span class="keyword">let</span> encoder = <span class="type">JSONEncoder</span>()</span><br><span class="line">encoder.outputFormatting = .prettyPrinted</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> personJson = <span class="keyword">try</span>? encoder.encode(keyedPersons) &#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="type">String</span>(data: personJson, encoding: .utf8)!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Swift 4 的一个新特性：条件一致性。<br>如果 <code>Array</code> 和 <code>Dictionary</code> 包含的 <code>KeyType</code> 和 <code>ValueType</code> 都遵从 <code>Decodable</code> 协议，那么这样的数组或字典本身也就遵从了 <code>Decodable</code> 协议：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift/stdlib/public/core/Codable.swift.gyb</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> : <span class="title">Decodable</span> <span class="title">where</span> <span class="title">Element</span> : <span class="title">Decodable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dictionary</span> : <span class="title">Decodable</span> <span class="title">where</span> <span class="title">Key</span> : <span class="title">Decodable</span>, </span></span><br><span class="line"><span class="class">                                       <span class="title">Value</span> : <span class="title">Decodable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化一下：<br>新建一个模型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Persons</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> persons: [<span class="type">Person</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编解码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> keyedPersons = <span class="keyword">try</span>? decoder.decode(<span class="type">Persons</span>.<span class="keyword">self</span>, from: json) &#123;</span><br><span class="line">    <span class="keyword">let</span> persons = keyedPersons.persons</span><br><span class="line">    <span class="built_in">print</span>(persons)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">let</span> encoder = <span class="type">JSONEncoder</span>()</span><br><span class="line">    encoder.outputFormatting = .prettyPrinted</span><br><span class="line"><span class="comment">//    if let personJson = try? encoder.encode(keyedPersons) &#123;</span></span><br><span class="line"><span class="comment">//       print(String(data: personJson, encoding: .utf8)!)</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> personJson = <span class="keyword">try</span>? encoder.encode(persons.first) &#123;</span><br><span class="line">       <span class="built_in">print</span>(<span class="type">String</span>(data: personJson, encoding: .utf8)!)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天来研究一下Swift的编解码。Swift 4.0 引入了Codable。Codable 是一种 混合类型，由 Decodable 和 Encodable 协议构成。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="编解码" scheme="http://yoursite.com/tags/%E7%BC%96%E8%A7%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Swift读书笔记</title>
    <link href="http://yoursite.com/2018/05/09/Swift%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/05/09/Swift读书笔记/</id>
    <published>2018-05-09T06:56:03.000Z</published>
    <updated>2018-05-10T03:31:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>读 王巍 (onevcat). “Swifter - Swift 必备 Tips (第三版)” 笔记<br><a id="more"></a></p></blockquote><h4 id="1-协议的方法声明为什么要使用mutating修饰？"><a href="#1-协议的方法声明为什么要使用mutating修饰？" class="headerlink" title="1.协议的方法声明为什么要使用mutating修饰？"></a>1.协议的方法声明为什么要使用mutating修饰？</h4><p>Swift 的 mutating 关键字修饰方法是为了能在该方法中修改 struct 或是 enum 的变量，所以如果你没在协议方法里写 mutating 的话，别人如果用 struct 或者 enum 来实现这个协议的话，就不能在方法里改变自己的变量了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> numberOfWheels: <span class="type">Int</span> &#123;<span class="keyword">get</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">UIColor</span> &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeColor</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyCar</span>: <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> numberOfWheels = <span class="number">4</span></span><br><span class="line">    <span class="keyword">var</span> color = <span class="type">UIColor</span>.blue</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeColor</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 因为 `color` 的类型是 `UIColor`，这里直接写 .red 就足以推断类型了</span></span><br><span class="line">        color = .red</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-的实现原理"><a href="#2-的实现原理" class="headerlink" title="2. ?? 的实现原理"></a>2. ?? 的实现原理</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> level: <span class="type">Int</span>?</span><br><span class="line"><span class="keyword">var</span> startLevel = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currentLevel = level ?? startLevel</span><br></pre></td></tr></table></figure><p>在这个例子中我们没有设置过 level，因此最后 startLevel 被赋值给了 currentLevel。如果我们充满好奇心地点进 ?? 的定义，可以看到 ?? 有两种版本：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">T</span>?) -&gt; <span class="type">T</span>?</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span></span><br></pre></td></tr></table></figure><p>在这里我们的输入满足的是后者，虽然表面上看 startLevel 只是一个 Int，但是其实在使用时它被自动封装成了一个 () -&gt; Int，有了这个提示，我们不妨来猜测一下 ?? 的实现吧： </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> <span class="keyword">optional</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Some</span>(<span class="keyword">let</span> value):</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">None</span>:</span><br><span class="line">            <span class="keyword">return</span> defaultValue()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能你会有疑问，为什么这里要使用 autoclosure，直接接受 T 作为参数并返回不行么，为何要用 () -&gt; T 这样的形式包装一遍，岂不是画蛇添足？其实这正是 autoclosure 的一个最值得称赞的地方。如果我们直接使用 T，那么就意味着在 ?? 操作符真正取值之前，我们就必须准备好一个默认值传入到这个方法中，一般来说这不会有很大问题，但是如果这个默认值是通过一系列复杂计算得到的话，可能会成为浪费 – 因为其实如果 optional 不是 nil 的话，我们实际上是完全没有用到这个默认值，而会直接返回 optional 解包后的值的。这样的开销是完全可以避免的，方法就是将默认值的计算推迟到 optional 判定为 nil 之后。</p><p>就这样，我们可以巧妙地绕过条件判断和强制转换，以很优雅的写法处理对 Optional 及默认值的取值了。最后要提一句的是，@autoclosure 并不支持带有输入参数的写法，也就是说只有形如 () -&gt; T 的参数才能使用这个特性进行简化。另外因为调用者往往很容易忽视 @autoclosure 这个特性，所以在写接受 @autoclosure 的方法时还请特别小心，如果在容易产生歧义或者误解的时候，还是使用完整的闭包写法会比较好。</p><h4 id="3-创建新的操作符"><a href="#3-创建新的操作符" class="headerlink" title="3.创建新的操作符"></a>3.创建新的操作符</h4><p>需要先对其进行声明，告诉编译器这个符号其实是一个操作符。添加如下代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">precedencegroup <span class="type">DotProductPrecedence</span> &#123;</span><br><span class="line">    <span class="keyword">associativity</span>: <span class="keyword">none</span> <span class="comment">// 定义了结合律，即如果多个同类的操作符顺序出现的计算顺序。</span></span><br><span class="line">    higherThan: <span class="type">MultiplicationPrecedence</span> <span class="comment">// 定义运算的优先级</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// infix 表示要定义的是一个中位操作符，即前后都是输入</span></span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> +*: <span class="type">DotProductPrecedence</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func +* (left: Vector2D, right: Vector2D) -&gt; Double &#123;</span><br><span class="line">    return left.x * right.x + left.y * right.y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重载操作符不需要声明。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;读 王巍 (onevcat). “Swifter - Swift 必备 Tips (第三版)” 笔记&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Swift inout关键字的使用</title>
    <link href="http://yoursite.com/2018/05/08/Swift%20inout%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/05/08/Swift inout关键字的使用/</id>
    <published>2018-05-08T05:58:42.000Z</published>
    <updated>2018-05-09T03:17:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天突然看到inout关键字so了解了一下其用法<br><a id="more"></a></p></blockquote><p>inout的作用是引用类型传递。与其对应的是值类型传递。</p><h4 id="1-值类型传递"><a href="#1-值类型传递" class="headerlink" title="1.值类型传递"></a>1.值类型传递</h4><p>值类型与引用类型相对，值类型的数据特征是，每一个内存实例都会有一份数据copy。在swift语言中，用<code>struct</code>定义的类型都是值类型，这包括了基本数据类型<code>（Int，String，Double,Float)</code>,集合类型<code>（Array，Dictionary，Set）</code>等。值类型在赋值和传递的过程中，会表现出copy数据的性质。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> point1 = <span class="type">Point</span>()</span><br><span class="line"><span class="keyword">var</span> point2 = point1</span><br></pre></td></tr></table></figure><p>我们定义两个值类型的变量point1、point2，当我们使用point1对point2进行赋值的时候，理论上编译器会创建point2对象，并将point1的数据进行一次copy赋值给point2。如果我们修改了point2的内容，我们会发现point1的内容并没有发生变化。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">point2.x = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(point2.x) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">print</span>(point1.x) <span class="comment">// 0, 对point2的修改不会影响point1的内容</span></span><br></pre></td></tr></table></figure><h4 id="2-引用类型传递"><a href="#2-引用类型传递" class="headerlink" title="2.引用类型传递"></a>2.引用类型传递</h4><p>值类型在传递的过程中会进行数据的copy，那么显而易见的是下面改变x的值是不会成功的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeX</span><span class="params">(x: Int)</span></span> &#123;</span><br><span class="line">    x + = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeX(x)</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">// 10 x的值不会发生改变</span></span><br></pre></td></tr></table></figure><p>如果我们希望x的值可以被改变，那么我们必须使用引用的方式来传递x。这时候我们就需要使用inout，当我们使用inout的时候，编译器不论当前struct的存放状态如何，都一定会把结构体放入一个连续的内存空间中，并将地址作为参数进行传递。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeX</span><span class="params">(x: inOut Int)</span></span> &#123; <span class="comment">// swift3.0改变了inOut修饰符的位置</span></span><br><span class="line">    x + = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeX(x)</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">// 20 x的值发生了改变</span></span><br></pre></td></tr></table></figure><h3 id="补充修正👇喵神说的："><a href="#补充修正👇喵神说的：" class="headerlink" title="补充修正👇喵神说的："></a>补充修正👇喵神说的：</h3><p>“如果你对 Swift 的值类型和引用类型的区别有所了解的话，会知道 Int 其实是一个值类型，我们并不能直接修改它的地址来让它指向新的值。那么这里这种类似 C 中取地址的 &amp; 符号到底做了额什么？对于值类型来说，inout 相当于在函数内部创建了一个新的值，然后在函数返回时将这个值赋给 &amp; 修饰的变量，这与引用类型的行为是不同的。”</p><p>摘录来自: 王巍 (onevcat). “Swifter - Swift 必备 Tips (第三版)”。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天突然看到inout关键字so了解了一下其用法&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="inout" scheme="http://yoursite.com/tags/inout/"/>
    
  </entry>
  
  <entry>
    <title>Swift同步网络请求(信号量)</title>
    <link href="http://yoursite.com/2018/05/04/Swift%E5%90%8C%E6%AD%A5%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82(%E4%BF%A1%E5%8F%B7%E9%87%8F)/"/>
    <id>http://yoursite.com/2018/05/04/Swift同步网络请求(信号量)/</id>
    <published>2018-05-04T01:58:16.000Z</published>
    <updated>2018-05-04T02:13:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天有个需求，我们的登录返回的Token两个小时过期，因此每次使用Token的时候需要检测Token是否过期，过期发请求刷新Token后，再使用Token进行数据请求。因为刷新Token使用的是异步请求，有时候还没有刷新完成，就进行了数据请求，导致请求数据失败。因此刷新Token的网络请求需改为同步请求。<br><a id="more"></a></p></blockquote><p>以前通过<code>NSURLConnection.sendSynchronousRequest()</code>方法能同步请求数据。从<code>iOS9</code>起，苹果废除<code>NSURLConnection</code>，使用<code>URLSession</code>代替 <code>NSURLConnection</code>。</p><p>使用<code>URLSession</code>进行同步请求，可以使用信号量。<br>创建一个默认值为0的信号量，在调用网络请求的异步方法后就之行<code>wait()</code>，因此这个方法会一直等待， 在网络请求的<code>block</code>返回时之行<code>signal()</code>，这时才代表这个方法结束阻塞，可以继续执行了。</p><p>Swift信号量操作如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建初始值为0的信号量，这时代表是红灯</span></span><br><span class="line"><span class="keyword">let</span> semaphore = <span class="type">DispatchSemaphore</span>(value: <span class="number">0</span>)</span><br><span class="line"><span class="comment">//让信号量 -1，比如默认值时0， wait()以后就变成了－1了，因此会等待</span></span><br><span class="line">semaphore.wait()</span><br><span class="line"><span class="comment">// 信号量+1，当&gt;0时就代表绿灯可以走了</span></span><br><span class="line">semaphore.signal()</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urlString:<span class="type">String</span> = <span class="type">NewLogin_BaseUrl</span> + <span class="type">Login</span>.refreshToken.path</span><br><span class="line"><span class="keyword">let</span> url = <span class="type">URL</span>(string:urlString)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> request = <span class="type">URLRequest</span>(url: url!)</span><br><span class="line">request.httpMethod = <span class="string">"POST"</span></span><br><span class="line">request.httpBody = <span class="string">"Refresh_token=<span class="subst">\(k_Refresh_token)</span>"</span>.data(using: .utf8)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建初始值为0的信号量</span></span><br><span class="line"><span class="keyword">let</span> semaphore = <span class="type">DispatchSemaphore</span>(value: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> session = <span class="type">URLSession</span>.shared</span><br><span class="line"><span class="keyword">let</span> dataTask = session.dataTask(with: request, completionHandler: &#123;(data, response, error) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">                                            </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data = data &#123;</span><br><span class="line">                </span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">let</span> result = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data, options: .allowFragments) &#123;</span><br><span class="line">                        </span><br><span class="line">       <span class="built_in">print</span>(result)                 </span><br><span class="line">                                        </span><br><span class="line">       <span class="keyword">guard</span> <span class="keyword">let</span> <span class="type">Tmodel</span>:<span class="type">YXNewLoginModel</span> = <span class="type">Mapper</span>&lt;<span class="type">YXNewLoginModel</span>&gt;().<span class="built_in">map</span>(<span class="type">JSON</span>:result <span class="keyword">as</span>! [<span class="type">String</span> : <span class="type">Any</span>]) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">if</span> <span class="type">Tmodel</span>.<span class="type">Success</span> == <span class="literal">true</span> &#123;</span><br><span class="line">                        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> content = <span class="type">Tmodel</span>.<span class="type">Content</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="type">Access_token</span> = content.<span class="type">Access_token</span>, <span class="keyword">let</span> <span class="type">Refresh_token</span> = content.<span class="type">Refresh_token</span> &#123;</span><br><span class="line">                            </span><br><span class="line">           <span class="keyword">if</span> <span class="type">Access_token</span> == <span class="string">"-1"</span> &#123;</span><br><span class="line">                                </span><br><span class="line">              <span class="type">HQ_rootVC</span>?.noticeOnlyText(<span class="string">"刷新Token出错 -1"</span>)</span><br><span class="line">                                </span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                </span><br><span class="line">              <span class="type">Uds</span>.<span class="keyword">set</span>(<span class="type">Access_token</span>, forKey: <span class="string">"k_Access_token"</span>)</span><br><span class="line">              <span class="type">Uds</span>.synchronize()</span><br><span class="line">              <span class="type">Uds</span>.<span class="keyword">set</span>(<span class="type">Refresh_token</span>, forKey: <span class="string">"k_Refresh_token"</span>)</span><br><span class="line">              <span class="type">Uds</span>.synchronize()</span><br><span class="line">                                </span><br><span class="line">              <span class="keyword">let</span> date = <span class="type">Date</span>()</span><br><span class="line">              <span class="type">Uds</span>.<span class="keyword">set</span>(date, forKey: <span class="string">"k_StartTime"</span>)</span><br><span class="line">              <span class="type">Uds</span>.synchronize()</span><br><span class="line">            &#125;</span><br><span class="line">                            </span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">HQ_rootVC</span>?.noticeOnlyText(<span class="string">"刷新Access_token出错"</span>)</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                </span><br><span class="line">          <span class="type">HQ_rootVC</span>?.noticeOnlyText(<span class="string">"刷新Access_token出错"</span>)</span><br><span class="line">          <span class="keyword">guard</span> <span class="keyword">let</span> error = error <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">          <span class="built_in">print</span>(error)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      semaphore.signal()</span><br><span class="line">            </span><br><span class="line">&#125;) <span class="keyword">as</span> <span class="type">URLSessionTask</span></span><br><span class="line">        </span><br><span class="line">dataTask.resume()</span><br><span class="line">        </span><br><span class="line"><span class="number">_</span> = semaphore.wait(timeout: <span class="type">DispatchTime</span>.distantFuture)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"刷新完毕！<span class="subst">\(k_Access_token)</span>"</span>)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="type">Content</span> =     &#123;</span><br><span class="line">        <span class="string">"Access_token"</span> = 5a74e75c69934c29bed444d9c932a0ac;</span><br><span class="line">        <span class="string">"Expires_in"</span> = <span class="number">7200</span>;</span><br><span class="line">        <span class="string">"Refresh_token"</span> = 3d88a290cce6475f8ab22d07c971a82f;</span><br><span class="line">        <span class="string">"Token_type"</span> = <span class="string">"&lt;null&gt;"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">Message</span> = <span class="string">""</span>;</span><br><span class="line">    <span class="type">Success</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">刷新完毕！5a74e75c69934c29bed444d9c932a0ac</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天有个需求，我们的登录返回的Token两个小时过期，因此每次使用Token的时候需要检测Token是否过期，过期发请求刷新Token后，再使用Token进行数据请求。因为刷新Token使用的是异步请求，有时候还没有刷新完成，就进行了数据请求，导致请求数据失败。因此刷新Token的网络请求需改为同步请求。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="信号量" scheme="http://yoursite.com/tags/%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>iOS中cookie的使用</title>
    <link href="http://yoursite.com/2018/03/20/iOS%E4%B8%ADcookie%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/03/20/iOS中cookie的使用/</id>
    <published>2018-03-20T06:04:43.000Z</published>
    <updated>2018-03-20T06:55:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天老大给了个需求把知网研学平台的修改个人账户密码的功能放到移动端，接口让我从web端抓取的。涉及到cookie方面的知识。so又研究了一下iOS中HTTP的cookie相关内容。<br><a id="more"></a></p></blockquote><h4 id="一、cookie基本介绍"><a href="#一、cookie基本介绍" class="headerlink" title="一、cookie基本介绍"></a>一、cookie基本介绍</h4><ol><li><p>Cookie是在客户端存储服务器状态的一种机制,Web服务器可以通过<code>Set-Cookie</code>或者<code>Set-Cookie2</code> HTTP头部设置Cookie。</p></li><li><p>Cookie是由服务器端生成，发送给<code>User-Agent</code>（一般是浏览器或者客户端），浏览器会将Cookie的<code>key/value</code>保存到某个目录下的文本文件内，下次请求同一网站地址时就发送该Cookie给服务器。</p></li><li><p>cookie就像服务器给用户贴的标签，用户访问一个web站点的时候，服务器就可以通过这个标签来识别是哪一个用户。<br>cookie中包含了一个有名字=值<code>（name=value）</code>这样的信息构成的任意列表，并通过<code>Set-Cookie</code>或<code>Set-Cookie2</code> Http响应（扩展）的header来设置标签。</p></li><li><p>cooke可以包含任意信息，但他们通常都只包含一个服务器为了进行追踪而产生的独特的识别码。</p></li><li><p>浏览器会记住从服务器返回的<code>Set-Cookie</code>或<code>Set-Cookie2</code> <code>header</code>中的cookie内容，并将cookie集存储在浏览器的cookie数据库中<strong>（ios客户端是存在app的library/cookie沙盒目录下）</strong>。将来用户访问统一站点时，浏览器会选中那个服务器贴到用户上的那些cookie,并请求的header中将起传给服务器。</p></li></ol><h4 id="二、iOS中Http请求对cookie的默认处理："><a href="#二、iOS中Http请求对cookie的默认处理：" class="headerlink" title="二、iOS中Http请求对cookie的默认处理："></a>二、iOS中Http请求对cookie的默认处理：</h4><ol><li><p>一直以为ios的http请求不会自动处理请求中的<br>cookie，所以一直认为客户端请求默认是没有Session的，现在发现自己的想法错了很久。</p></li><li><p><code>NSURLRequest</code>默认的处理过程：类似于服务器端和网页端的session，其实<code>NSURLRequest</code>已经做了浏览器做的动作，帮你处理了Cookie。当你访问一个链接时，<code>NSURLRequest</code>会帮你主动记录下来你访问站点的cookie，而且当你下次再访问这个站点时，<code>NSURLRequest</code>会拿着上次保存下来了的cookie继续去请求。</p></li><li><p>所以如果服务器端使用了session，ios客户端使用Http请求，默认就是已经有了session的。</p></li><li><p><code>NSURLRequest</code>的一个属性，<code>HTTPShouldHandleCookies</code>，表示Http请求是否自动处理Cookie，默认值为<code>YES</code>。</p></li></ol><h4 id="二、cookie的读写："><a href="#二、cookie的读写：" class="headerlink" title="二、cookie的读写："></a>二、cookie的读写：</h4><ol><li><p>假如我们想自己对Cookie做一些处理，我们如何读写http请求中的cookie呢？在<code>Foundation</code>类库中，有两个重要的相关的类：<code>HTTPCookieStorage</code>和<code>HTTPCookie</code>。</p></li><li><p><code>HTTPCookieStorage</code>是一个管理Http请求中cookie的单例类，它会在一个全局范围内管理Cookie，在iOS中，cookie会限制在一个应用的范围内。可以通过这个类来读写Cookie。</p><ul><li><p>获取单例</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">shared</span>: <span class="title">HTTPCookieStorage</span> </span>&#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p>获取cookie</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前存储的所有cookie </span></span><br><span class="line"><span class="keyword">var</span> cookies: [<span class="type">HTTPCookie</span>]? </span><br><span class="line"><span class="comment">//针对特定URL的cookie </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cookies</span><span class="params">(<span class="keyword">for</span> URL: URL)</span></span> -&gt; [<span class="type">HTTPCookie</span>]? </span><br><span class="line"><span class="comment">// 对存储的cookie进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortedCookies</span><span class="params">(using sortOrder: [NSSortDescriptor])</span></span> -&gt; [<span class="type">HTTPCookie</span>]</span><br></pre></td></tr></table></figure></li><li><p>添加/删除cookie</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除cookie</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteCookie</span><span class="params">(HTTPCookie)</span></span></span><br><span class="line"><span class="comment">// 如果cookie接受策略许可，则将cookie存储在cookie存储区中。 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setCookie</span><span class="params">(HTTPCookie)</span></span></span><br><span class="line"><span class="comment">// 如果接收方的cookie接受策略允许，则向接收器添加一个cookie数组。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setCookies</span><span class="params">([HTTPCookie], <span class="keyword">for</span>: URL?, mainDocumentURL: URL?)</span></span></span><br></pre></td></tr></table></figure></li><li><p>改变cookie接收策略</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cookieAcceptPolicy: <span class="type">HTTPCookie</span>.<span class="type">AcceptPolicy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">AcceptPolicy</span> : <span class="title">UInt</span> </span>&#123;</span><br><span class="line"><span class="keyword">case</span> always <span class="comment">// 接收所有cookie,默认策略.</span></span><br><span class="line"><span class="keyword">case</span> never <span class="comment">// 拒绝所有cookie</span></span><br><span class="line"><span class="keyword">case</span> onlyFromMainDocumentDomain <span class="comment">// 只接收main document domain中的cookie.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通知相关</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当HTTPCookieStorage实例中的cookies变化时发出此通知。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">let</span> <span class="type">NSHTTPCookieManagerCookiesChanged</span>: <span class="type">NSNotification</span>.<span class="type">Name</span></span><br><span class="line"><span class="comment">// 当NSHTTPCookieStorage实例的cookie acceptance policy变化时发出此通知。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">let</span> <span class="type">NSHTTPCookieManagerAcceptPolicyChanged</span>: <span class="type">NSNotification</span>.<span class="type">Name</span></span><br></pre></td></tr></table></figure></li><li><p>手动设置cookies</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动设置cookie（不会持久化到沙盒 Library/Cookies目录） </span></span><br><span class="line"><span class="keyword">var</span> cookieProperties = [<span class="type">HTTPCookiePropertyKey</span> : <span class="type">Any</span>]()</span><br><span class="line">cookieProperties[<span class="type">HTTPCookiePropertyKey</span>.name] = <span class="string">"username"</span></span><br><span class="line">cookieProperties[<span class="type">HTTPCookiePropertyKey</span>.value] = <span class="string">"my cookie"</span></span><br><span class="line">cookieProperties[<span class="type">HTTPCookiePropertyKey</span>.domain] = <span class="string">"localhost"</span></span><br><span class="line">cookieProperties[<span class="type">HTTPCookiePropertyKey</span>.originURL] = <span class="string">"localhost"</span></span><br><span class="line">cookieProperties[<span class="type">HTTPCookiePropertyKey</span>.path] = <span class="string">"/"</span></span><br><span class="line">cookieProperties[<span class="type">HTTPCookiePropertyKey</span>.version] = <span class="string">"0"</span></span><br><span class="line">cookieProperties[<span class="type">HTTPCookiePropertyKey</span>.port] = <span class="number">8181</span></span><br><span class="line">cookieProperties[<span class="type">HTTPCookiePropertyKey</span>.expires] = <span class="type">Date</span>(timeIntervalSinceNow: <span class="number">60</span> * <span class="number">60</span>)</span><br><span class="line">cookieProperties[<span class="type">HTTPCookiePropertyKey</span>.discard] = <span class="number">0</span> <span class="keyword">let</span> cookie = <span class="type">HTTPCookie</span>(properties: cookieProperties)</span><br><span class="line"><span class="type">HTTPCookieStorage</span>.shared.setCookie(cookie!)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>HTTPCookie类代表cookie对象，通过内置的一些key，我们可以合成Cookie对象，然后写入<code>HTTPCookieStorage</code>中，也可以从<code>HTTPCookieStorage</code>中读取出存在的所有<code>HTTPCookie</code>。</p><ul><li><p>创建cookie</p><ul><li><p>根据URL从响应对象的<code>headerFileds</code>中读取到Cooki<code>相关内容,生成</code>NSHTTPCookie`实例对象数组。</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法会忽略headerFileds中与cookie无关的字段， </span></span><br><span class="line"><span class="comment">// 如果headerFileds中的cookie没有指定domain,则使用theURL的domain,如果没有指定path,则使用”/”. </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">cookies</span>(<span class="title">withResponseHeaderFields</span>: [<span class="title">String</span> : <span class="title">String</span>], <span class="title">for</span>: <span class="title">URL</span>)</span></span><br></pre></td></tr></table></figure></li><li><p>用给定的属性生成cookie对象</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>?(properties: [<span class="type">HTTPCookiePropertyKey</span> : <span class="type">Any</span>])</span><br></pre></td></tr></table></figure></li></ul></li><li><p>转换cookie为 <code>request headers</code></p><ul><li><p>返回一个字典，通过<code>setValue(_:forHTTPHeaderField:)</code>方法设置返回的字典到request。然后发送给服务器。</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">requestHeaderFields</span>(<span class="title">with</span> <span class="title">cookies</span>: [<span class="title">HTTPCookie</span>]) -&gt; [<span class="title">String</span> : <span class="title">String</span>]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>cookie的各种属性</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cookie的注释，说明cookir的用途和目的 </span></span><br><span class="line"><span class="keyword">var</span> comment: <span class="type">String</span>? </span><br><span class="line"><span class="comment">// 注释的链接，进一步说明Cookie </span></span><br><span class="line"><span class="keyword">var</span> commentURL: <span class="type">URL</span>? </span><br><span class="line"><span class="comment">// cookie所属的域 </span></span><br><span class="line"><span class="keyword">var</span> domain: <span class="type">String</span> </span><br><span class="line"><span class="comment">// 过期时间 </span></span><br><span class="line"><span class="keyword">var</span> expiresDate: <span class="type">Date</span>? </span><br><span class="line"><span class="comment">// 是否发送给http服务器 </span></span><br><span class="line"><span class="keyword">var</span> isHTTPOnly: <span class="type">Bool</span> </span><br><span class="line"><span class="comment">// cookie是否通过ssl安全链接发送 </span></span><br><span class="line"><span class="keyword">var</span> isSecure: <span class="type">Bool</span> </span><br><span class="line"><span class="comment">// 在会话结束的时候是否移除cookie(不考虑它的过期时间) </span></span><br><span class="line"><span class="keyword">var</span> isSessionOnly: <span class="type">Bool</span> </span><br><span class="line"><span class="comment">// cookie名 </span></span><br><span class="line"><span class="keyword">var</span> name: <span class="type">String</span> </span><br><span class="line"><span class="comment">//cookie将在cookie域中发送此路径的请求，以及所有具有此前缀的路径。“/”路径意味着cookie将被发送到域中的所有URL。 </span></span><br><span class="line"><span class="keyword">var</span> path: <span class="type">String</span> </span><br><span class="line"><span class="comment">// cookies的所以端口 </span></span><br><span class="line"><span class="keyword">var</span> portList: [<span class="type">NSNumber</span>]? </span><br><span class="line"><span class="comment">// cookie的所以属性 var properties: [HTTPCookiePropertyKey : Any]? </span></span><br><span class="line"><span class="comment">// 值 var value: String </span></span><br><span class="line"><span class="comment">// cookie的版本 0或者1 var version: Int</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h4><p>会话（Session）跟踪是Web程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是Cookie与Session。Cookie通过在客户端记录信息确定用户身份，Session通过在服务器端记录信息确定用户身份，在移动开发中Cookie越来越多用到了Cookie,觉得有必要去学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天老大给了个需求把知网研学平台的修改个人账户密码的功能放到移动端，接口让我从web端抓取的。涉及到cookie方面的知识。so又研究了一下iOS中HTTP的cookie相关内容。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="cookie" scheme="http://yoursite.com/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>验证iOS的通知机制是同步还是异步</title>
    <link href="http://yoursite.com/2018/02/28/%E9%AA%8C%E8%AF%81iOS%E7%9A%84%E9%80%9A%E7%9F%A5%E6%9C%BA%E5%88%B6%E6%98%AF%E5%90%8C%E6%AD%A5%E8%BF%98%E6%98%AF%E5%BC%82%E6%AD%A5/"/>
    <id>http://yoursite.com/2018/02/28/验证iOS的通知机制是同步还是异步/</id>
    <published>2018-02-28T05:53:40.000Z</published>
    <updated>2018-02-28T06:08:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>曾经面试的时候被问到过的面试题，突然想起来了，记录一下。<br><a id="more"></a></p></blockquote><p>与<code>JavaScript</code>中的事件机制不同，<code>iOS</code>里的事件广播机制是同步的，默认情况下，广播一个通知，会阻塞后面的代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>) click  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">NSNotificationCenter</span> *center =  [<span class="built_in">NSNotificationCenter</span> defaultCenter];  </span><br><span class="line">    [center postNotificationName:<span class="string">@"event_happend"</span> object:<span class="keyword">self</span>];  </span><br><span class="line">          </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"HQ1111"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按下按钮后，发送一个广播，此前已经注册了2个此事件的侦听者</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">id</span>) init  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];  </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">self</span>)&#123;  </span><br><span class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(whenReceive:) name:<span class="string">@"event_happend"</span> object:<span class="literal">nil</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">        </span><br><span class="line">-(<span class="keyword">void</span>) whenReceive:(<span class="built_in">NSNotification</span>*) notification  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"HQ2222"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">id</span>) init  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];  </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">self</span>)&#123;  </span><br><span class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(whenReceive:) name:<span class="string">@"event_happend"</span> object:<span class="literal">nil</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">      </span><br><span class="line">-(<span class="keyword">void</span>) whenReceive:(<span class="built_in">NSNotification</span>*) notification  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"HQ3333"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行这段代码，首先会输出HQ2222，然后是HQ3333，最后才是HQ1111。调试发现，代码始终是跑在同一个线程中（广播事件的线程），广播事件之后的代码被阻塞，直到所有的侦听者都执行完响应</p><p>所以，由于<code>NotificationCenter</code>的这个特性，如果希望广播的事件异步处理，则需要在侦听者的方法里开启新线程。应该把<code>Notification</code>作为组件间解耦的方式，而不是利用它来实现异步处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;曾经面试的时候被问到过的面试题，突然想起来了，记录一下。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS自动打包发布</title>
    <link href="http://yoursite.com/2018/02/28/iOS%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83/"/>
    <id>http://yoursite.com/2018/02/28/iOS自动打包发布/</id>
    <published>2018-02-28T01:25:51.000Z</published>
    <updated>2018-02-28T05:48:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每次更新项目都要给测试人员打包，要么挨个测试机安装，要么发布到蒲公英或者Fir等第三方托管平台，<code>Product -&gt; Archive</code>编译打包,选择<code>Organizer</code>,导出<code>ad hoc</code>的<code>ipa</code>包上传。很是麻烦，因此写个脚本自动打包发布。</p></blockquote><a id="more"></a><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h4><p>当我们在<code>Xcode</code>点击了<code>build</code>或者运行<code>comand+R</code>之后，Xcode自己执行的命令是<code>xcodebuild</code>这条命令.编译好之后,用<code>xcrun</code>命令导出所需要的包。（<code>xcodebuild</code>命令编译为<code>.app</code>文件，<code>xcrun</code>命令将<code>.app</code>文件打包为<code>.ipa</code>文件）</p><p>安装<code>fir-cli</code>执行命令<code>gem fir-cli</code>即可安装。安装成功后使用<code>fir</code>指令上传我们的测试包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 将XXX替换成自己的Fir平台的token</span><br><span class="line">fir login -T XXX</span><br><span class="line">fir publish $exportIpaPath/$scheme_name.ipa</span><br></pre></td></tr></table></figure><h4 id="2-编写脚本"><a href="#2-编写脚本" class="headerlink" title="2.编写脚本"></a>2.编写脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d ./IPADir ];</span><br><span class="line">then</span><br><span class="line">mkdir -p IPADir;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">#工程绝对路径</span></span><br><span class="line">project_path=$(cd `dirname $<span class="number">0</span>`; pwd)</span><br><span class="line"></span><br><span class="line"><span class="comment">#工程名 将XXX替换成自己的工程名</span></span><br><span class="line">project_name=XXX</span><br><span class="line"></span><br><span class="line"><span class="comment">#scheme名 将XXX替换成自己的sheme名</span></span><br><span class="line">scheme_name=XXX</span><br><span class="line"></span><br><span class="line"><span class="comment">#打包模式 Debug/Release</span></span><br><span class="line">development_mode=Debug</span><br><span class="line"></span><br><span class="line"><span class="comment">#build文件夹路径</span></span><br><span class="line">build_path=$&#123;project_path&#125;/build</span><br><span class="line"></span><br><span class="line"><span class="comment">#plist文件所在路径</span></span><br><span class="line">exportOptionsPlistPath=$&#123;project_path&#125;/exportTest.plist</span><br><span class="line"></span><br><span class="line"><span class="comment">#导出.ipa文件所在路径</span></span><br><span class="line">exportIpaPath=$&#123;project_path&#125;/IPADir/$&#123;development_mode&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo <span class="string">"Place enter the number you want to export ? [ 1:app-store 2:ad-hoc] "</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">read number</span><br><span class="line"><span class="keyword">while</span>([[ $number != <span class="number">1</span> ]] &amp;&amp; [[ $number != <span class="number">2</span> ]])</span><br><span class="line">do</span><br><span class="line">echo <span class="string">"Error! Should enter 1 or 2"</span></span><br><span class="line">echo <span class="string">"Place enter the number you want to export ? [ 1:app-store 2:ad-hoc] "</span></span><br><span class="line">read number</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $number == <span class="number">1</span> ];then</span><br><span class="line">development_mode=Release</span><br><span class="line">exportOptionsPlistPath=$&#123;project_path&#125;/exportAppstore.plist</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">development_mode=Debug</span><br><span class="line">exportOptionsPlistPath=$&#123;project_path&#125;/exportTest.plist</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo <span class="string">'///-----------'</span></span><br><span class="line">echo <span class="string">'/// 正在清理工程'</span></span><br><span class="line">echo <span class="string">'///-----------'</span></span><br><span class="line">xcodebuild \</span><br><span class="line">clean -configuration $&#123;development_mode&#125; -quiet  || exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo <span class="string">'///--------'</span></span><br><span class="line">echo <span class="string">'/// 清理完成'</span></span><br><span class="line">echo <span class="string">'///--------'</span></span><br><span class="line">echo <span class="string">''</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'///-----------'</span></span><br><span class="line">echo <span class="string">'/// 正在编译工程:'</span>$&#123;development_mode&#125;</span><br><span class="line">echo <span class="string">'///-----------'</span></span><br><span class="line">xcodebuild \</span><br><span class="line">archive -workspace $&#123;project_path&#125;/$&#123;project_name&#125;.xcworkspace \</span><br><span class="line">-scheme $&#123;scheme_name&#125; \</span><br><span class="line">-configuration $&#123;development_mode&#125; \</span><br><span class="line">-archivePath $&#123;build_path&#125;/$&#123;project_name&#125;.xcarchive  -quiet  || exit</span><br><span class="line"></span><br><span class="line">echo <span class="string">'///--------'</span></span><br><span class="line">echo <span class="string">'/// 编译完成'</span></span><br><span class="line">echo <span class="string">'///--------'</span></span><br><span class="line">echo <span class="string">''</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'///----------'</span></span><br><span class="line">echo <span class="string">'/// 开始ipa打包'</span></span><br><span class="line">echo <span class="string">'///----------'</span></span><br><span class="line">xcodebuild -exportArchive -archivePath $&#123;build_path&#125;/$&#123;project_name&#125;.xcarchive \</span><br><span class="line">-configuration $&#123;development_mode&#125; \</span><br><span class="line">-exportPath $&#123;exportIpaPath&#125; \</span><br><span class="line">-exportOptionsPlist $&#123;exportOptionsPlistPath&#125; \</span><br><span class="line">-quiet || exit</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -e $exportIpaPath/$scheme_name.ipa ]; then</span><br><span class="line">echo <span class="string">'///----------'</span></span><br><span class="line">echo <span class="string">'/// ipa包已导出'</span></span><br><span class="line">echo <span class="string">'///----------'</span></span><br><span class="line">open $exportIpaPath</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">echo <span class="string">'///-------------'</span></span><br><span class="line">echo <span class="string">'/// ipa包导出失败 '</span></span><br><span class="line">echo <span class="string">'///-------------'</span></span><br><span class="line">fi</span><br><span class="line">echo <span class="string">'///------------'</span></span><br><span class="line">echo <span class="string">'/// 打包ipa完成  '</span></span><br><span class="line">echo <span class="string">'///-----------='</span></span><br><span class="line">echo <span class="string">''</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'///-------------'</span></span><br><span class="line">echo <span class="string">'/// 开始发布ipa包 '</span></span><br><span class="line">echo <span class="string">'///-------------'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $number == <span class="number">1</span> ];then</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证并上传到App Store</span></span><br><span class="line"><span class="comment"># 将-u 后面的XXX替换成自己的AppleID的账号，-p后面的XXX替换成自己的密码</span></span><br><span class="line">altoolPath=<span class="string">"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool"</span></span><br><span class="line"><span class="string">"$altoolPath"</span> --validate-app -f $&#123;exportIpaPath&#125;/$&#123;scheme_name&#125;.ipa -u XXX -p XXX -t ios --output-format xml</span><br><span class="line"><span class="string">"$altoolPath"</span> --upload-app -f $&#123;exportIpaPath&#125;/$&#123;scheme_name&#125;.ipa -u  XXX -p XXX -t ios --output-format xml</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上传到Fir</span></span><br><span class="line"><span class="comment"># 将XXX替换成自己的Fir平台的token</span></span><br><span class="line">fir login -T XXX</span><br><span class="line">fir publish $exportIpaPath/$scheme_name.ipa</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exit <span class="number">0</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/kHeQing/HQArchiveScript.git" target="_blank" rel="noopener">脚本文件下载</a></p><p><strong>说明：</strong> </p><p>用<code>\</code>来进行换行分隔，一条<code>shell</code>命令过长时可以进行分割显示.<br><code>$</code>变量名是引用变量，拿来使用<br><code>|| exit</code> 指明如果这一条命令执行失败，则退出当前<code>shell</code>.</p><p>如果项目没有采用<code>Cocoapods</code>管理，没有<br><code>.xcworkspace</code>,只有xcodeproj`,只需要将脚本中这句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild \</span><br><span class="line">archive -workspace $&#123;project_path&#125;/$&#123;project_name&#125;.xcworkspace \</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild \</span><br><span class="line">archive -project $&#123;project_path&#125;/$&#123;project_name&#125;.xcodeproj \</span><br></pre></td></tr></table></figure><p>就👌了</p><p>如果是蒲公英的话将脚本中的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传到Fir</span></span><br><span class="line"><span class="comment"># 将XXX替换成自己的Fir平台的token</span></span><br><span class="line">fir login -T XXX</span><br><span class="line">fir publish $exportIpaPath/$scheme_name.ipa</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传到蒲公英</span></span><br><span class="line"><span class="comment"># 将XXX替换成自己的Fir平台的token</span></span><br><span class="line">curl -F <span class="string">"file=@$&#123;exportIpaPath&#125;/$&#123;scheme_name&#125;.ipa"</span> \</span><br><span class="line">-F <span class="string">"uKey=$&#123;uKey&#125;"</span> \</span><br><span class="line">-F <span class="string">"_api_key=$&#123;apiKey&#125;"</span> \</span><br><span class="line">https://www.pgyer.com/apiv1/app/upload</span><br></pre></td></tr></table></figure><p>即可。<br><code>$uKey</code>是开发者的用户<code>Key</code>，在蒲公英平台<code>应用管理-API</code>中查看。<br><code>$apiKey</code>是开发者的<code>API Key</code>，在蒲公英平台<code>应用管理-API</code>中查看。</p><h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h4><ol><li>将脚本文件下载下来，根据文件中的注释配置好文件，然后将三个文件拖到项目的根目录。</li><li>项目的证书描述文件配置好。</li><li>去fir平台获取到<code>API token</code>。</li><li><code>cd</code>到工程根目录，<code>./shell.sh</code>回车就会执行脚本。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;每次更新项目都要给测试人员打包，要么挨个测试机安装，要么发布到蒲公英或者Fir等第三方托管平台，&lt;code&gt;Product -&amp;gt; Archive&lt;/code&gt;编译打包,选择&lt;code&gt;Organizer&lt;/code&gt;,导出&lt;code&gt;ad hoc&lt;/code&gt;的&lt;code&gt;ipa&lt;/code&gt;包上传。很是麻烦，因此写个脚本自动打包发布。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>内联函数与宏定义</title>
    <link href="http://yoursite.com/2018/02/10/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>http://yoursite.com/2018/02/10/内联函数与宏定义/</id>
    <published>2018-02-10T06:14:27.000Z</published>
    <updated>2018-02-10T06:14:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在C中，常用预处理语句#define来代替一个函数定义。<br><a id="more"></a></p></blockquote><h4 id="内联函数与宏定义"><a href="#内联函数与宏定义" class="headerlink" title="内联函数与宏定义"></a>内联函数与宏定义</h4><p>在C中，常用预处理语句#define来代替一个函数定义。<br>例如：<br><code>#define MAX(a，b) ((a)&gt;(b)?(a):(b))</code> </p><p>该语句使得程序中每个出现<code>MAX(a,b)</code>函数调用的地方都被宏定义中后面的表达式<code>((a)&gt;(b)?(a):(b))</code>所替换。</p><p>宏定义语句的书写格式有过分的讲究，<code>MAX</code>与括号之间不能有空格，所有的参数都要放在括号里。尽管如此，它还是有麻烦：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a=1，b=0；</span><br><span class="line">MAX(a++,b)； //a被增值2次</span><br><span class="line">MAX(a++,b+10)； //a被增值1次</span><br><span class="line">MAX(a,&quot;Hello&quot;)；//错误地比较int和字符串，没有参数类型检查</span><br></pre></td></tr></table></figure><p><code>MAX( )</code>函数的求值会由于两个参数值的大小不同而产生不同的副作用。<code>MAX(a++,b)</code>的值为2，同时a的值为3；<code>MAX(a++,b+10)</code>的值为10，同时a的值为2。如果是普通函数，则<code>MAX(a,&quot;HellO&quot;)</code>会受到函数调用的检查，但此处不会因为两个参数类型不同而被编译拒之门外。幸运的是，通过一个<strong>内联函数</strong>可以得到所有<strong>宏的替换效能</strong>和所有<strong>可预见的状态以及常规函数的类型检查</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inline int MAX(int a，int b)</span><br><span class="line">&#123;</span><br><span class="line">　 return a&gt;b?a:b；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>内联函数与宏的区别：</p><p> 传统的宏定义函数可能会引起一些麻烦。</p><p> ex：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define F(x) x+x</span><br><span class="line">  </span><br><span class="line">void main()&#123;int i=1;F(i++);&#125;</span><br></pre></td></tr></table></figure><p> 这里x将被加两次。</p><p> 内联函数被编译器自动的用函数的形势添加进代码，而不会出现这种情况。</p><p> 内联函数的使用提高了效率（省去了很多函数调用汇编代码如：call和ret等）。</p></li><li><p>内联函数的使用：</p><p> 所有在类的声明中定义的函数将被自动认为是内联函数。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class A()</span><br><span class="line">&#123;</span><br><span class="line">    void c();// not a inline function;</span><br><span class="line"></span><br><span class="line">    void d()&#123; </span><br><span class="line">        print(&quot;d() is a inline function.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果想将一个全局函数定义为内联函数可用，inline 关键字。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inline a()&#123;</span><br><span class="line">    print(&quot;a() is a inline function.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>注意：</strong></p><p>   在内联函数中如果有复杂操作将不被内联。如：循环和递归调用。</p><p> <strong>总结：</strong></p><p>   将简单短小的函数定义为内联函数将会提高效率。</p></li></ol><h4 id="用内联取代宏代码"><a href="#用内联取代宏代码" class="headerlink" title="用内联取代宏代码"></a>用内联取代宏代码</h4><p><code>C++</code>语言支持函数内联，其目的是为了提高函数的执行效率（速度）。<br>在C程序中，可以用宏代码提高执行效率。宏代码本身不是函数，但使用起来象函数。<br><strong>预处理器用复制宏代码的方式代替函数调用，省去了参数压栈、生成汇编语言的CALL调用、返回参数、执行return等过程，从而提高了速度。</strong> 使用宏代码最大的缺点是容易出错，预处理器在复制宏代码时常常产生意想不到的边际效应。例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define MAX(a, b)       (a) &gt; (b) ? (a) : (b)</span><br></pre></td></tr></table></figure><p>语句  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = MAX(i, j) + 2 ;</span><br></pre></td></tr></table></figure><p>将被预处理器解释为 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = (i) &gt; (j) ? (i) : (j) + 2 ;</span><br></pre></td></tr></table></figure><p>由于运算符<code>‘+’</code>比运算符<code>‘:’</code>的优先级高，所以上述语句并不等价于期望的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = ( (i) &gt; (j) ? (i) : (j) ) + 2 ;</span><br></pre></td></tr></table></figure><p>如果把宏代码改写为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define MAX(a, b)       ( (a) &gt; (b) ? (a) : (b) )</span><br></pre></td></tr></table></figure><p>则可以解决由优先级引起的错误。但是即使使用修改后的宏代码也不是万无一失的，例如语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = MAX(i++, j);</span><br></pre></td></tr></table></figure><p>将被预处理器解释为 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = (i++) &gt; (j) ? (i++) : (j);</span><br></pre></td></tr></table></figure><p>对于<code>C++</code> 而言，使用宏代码还有另一种缺点：<strong>无法操作类的私有数据成员。</strong></p><p>让我们看看<code>C++</code>的“函数内联”是如何工作的。</p><p><strong>对于任何内联函数，编译器在符号表里放入函数的声明（包括名字、参数类型、返回值类型）。如果编译器没有发现内联函数存在错误，那么该函数的代码也被放入符号表里。在调用一个内联函数时，编译器首先检查调用是否正确（进行类型安全检查，或者进行自动类型转换，当然对所有的函数都一样）。如果正确，内联函数的代码就会直接替换函数调用，于是省去了函数调用的开销。</strong>  </p><p>这个过程与预处理有显著的不同，因为预处理器不能进行类型安全检查，或者进行自动类型转换。假如内联函数是成员函数，对象的地址（this）会被放在合适的地方，这也是预处理器办不到的。<br><code>C++</code>语言的函数内联机制既具备宏代码的效率，又增加了安全性，而且可以自由操作类的数据成员。</p><p>所以在<code>C++</code>程序中，应该用内联函数取代所有宏代码，“断言assert”恐怕是唯一的例外。assert是仅在Debug版本起作用的宏，它用于检查“不应该”发生的情况。为了不在程序的Debug版本和Release版本引起差别，assert不应该产生任何副作用。如果assert是函数，由于函数调用会引起内存、代码的变动，那么将导致Debug版本与Release版本存在差异。所以assert不是函数，而是宏。</p><h4 id="内联函数的编程风格"><a href="#内联函数的编程风格" class="headerlink" title="内联函数的编程风格"></a>内联函数的编程风格</h4><p>关键字<code>inline</code>必须与函数定义体放在一起才能使函数成为内联，仅将inline放在函数声明前面不起任何作用。如下风格的函数Foo不能成为内联函数： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inline void Foo(int x, int y);  // inline仅与函数声明放在一起 </span><br><span class="line">void Foo(int x, int y) </span><br><span class="line">&#123; </span><br><span class="line">… </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而如下风格的函数Foo则成为内联函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void Foo(int x, int y);  </span><br><span class="line">inline void Foo(int x, int y) // inline与函数定义体放在一起 </span><br><span class="line">&#123; </span><br><span class="line">… </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以说，<code>inline</code>是一种<br><strong>“用于实现的关键字”</strong><br>，而不是一种<br><strong>“用于声明的关键字”</strong><br>。一般地，用户可以阅读函数的声明，但是看不到函数的定义。尽管在大多数教科书中内联函数的声明、定义体前面都加了<code>inline</code>关键字，但我认为<code>inline</code>不应该出现在函数的声明中。这个细节虽然不会影响函数的功能，但是体现了高质量<code>C++/C</code>程序设计风格的一个基本原则：<strong>声明与定义不可混为一谈，用户没有必要、也不应该知道函数是否需要内联。</strong></p><p>定义在类声明之中的成员函数将自动地成为内联函数，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class A </span><br><span class="line">&#123; </span><br><span class="line">public: </span><br><span class="line">void Foo(int x, int y) &#123; … &#125;  // 自动地成为内联函数 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将成员函数的定义体放在类声明之中虽然能带来书写上的方便，但不是一种良好的编程风格，上例应该改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 头文件 </span><br><span class="line">class A </span><br><span class="line">&#123; </span><br><span class="line">public: </span><br><span class="line">void Foo(int x, int y)；  </span><br><span class="line">&#125; </span><br><span class="line">// 定义文件 </span><br><span class="line">inline void A::Foo(int x, int y) </span><br><span class="line">&#123; </span><br><span class="line">… </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="慎用内联"><a href="#慎用内联" class="headerlink" title="慎用内联"></a>慎用内联</h4><p>内联能提高函数的执行效率，为什么不把所有的函数都定义成内联函数？ </p><p>如果所有的函数都是内联函数，还用得着“内联”这个关键字吗？</p><p>内联是以<strong>代码膨胀（复制）</strong>为代价，仅仅省去了<strong>函数调用</strong>的开销，从而提高函数的执行效率。如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收获会很少。另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间。</p><p>以下情况不宜使用内联： </p><ul><li>如果函数体内的代码比较长，使用内联将导致内存消耗代价较高。 </li><li>如果函数体内出现循环，那么执行函数体内代码的时间要比函数调用的开销大。</li></ul><p>类的构造函数和析构函数容易让人误解成使用内联更有效。要当心构造函数和析构函数可能会隐藏一些行为，如“偷偷地”执行了基类或成员对象的构造函数和析构函数。</p><p>所以不要随便地将构造函数和析构函数的定义体放在类声明中。<br>一个好的编译器将会根据函数的定义体，自动地取消不值得的内联（这进一步说明了inline不应该出现在函数的声明中）。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在C中，常用预处理语句#define来代替一个函数定义。&lt;br&gt;
    
    </summary>
    
      <category term="c语言" scheme="http://yoursite.com/categories/c%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="内联函数" scheme="http://yoursite.com/tags/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/"/>
    
      <category term="宏定义" scheme="http://yoursite.com/tags/%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记 __slots__ &amp; @property</title>
    <link href="http://yoursite.com/2018/02/05/Python%E7%AC%94%E8%AE%B0%20__slots__/"/>
    <id>http://yoursite.com/2018/02/05/Python笔记 __slots__/</id>
    <published>2018-02-05T01:02:32.000Z</published>
    <updated>2018-02-05T02:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="slots是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。"><a href="#slots是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。" class="headerlink" title="slots是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。"></a><strong>slots</strong>是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。</h5><a id="more"></a><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'age'</span>)</span><br></pre></td></tr></table></figure><p>那么<code>Student</code>的实例只能添加<code>name</code>，<code>age</code>属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'HeQing'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">18</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">100</span> </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></span><br></pre></td></tr></table></figure><p><code>score</code>属性没有放在<code>__slots__</code>中，所以会报错。</p><p>使用的<code>__slots__</code>的时候要注意，它仅对当前类的实例起作用，对继承的子类的实例不起作用，不会限制子类实例属性的绑定。<br>如果子类中也使用<code>__slots__</code>那么子类实例属性限制为父类的<code>__slots__</code>加上子类的<code>__slots__</code>。</p><h5 id="property是一个装饰器（decorator），负责把一个方法变成属性调用。这个属性我们可以添加限制。"><a href="#property是一个装饰器（decorator），负责把一个方法变成属性调用。这个属性我们可以添加限制。" class="headerlink" title="@property是一个装饰器（decorator），负责把一个方法变成属性调用。这个属性我们可以添加限制。"></a><code>@property</code>是一个装饰器（decorator），负责把一个方法变成属性调用。这个属性我们可以添加限制。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._score </span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must be an integer!'</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must between 0 ~ 100!'</span>)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure><p>把一个<code>getter</code>方法变成属性只需加上<code>@proterty</code>，此时<code>@proterty</code>本身有创建了另一个装饰器<code>@score.setter</code>，负责把一个<code>setter</code>方法变成属性值，这样我们就有了一个可控的属性操作，可以限制属性的值，类型等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">60</span> <span class="comment"># OK，实际转化为s.set_score(60)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score <span class="comment"># OK，实际转化为s.get_score()</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">9999</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between <span class="number">0</span> ~ <span class="number">100</span>!</span><br></pre></td></tr></table></figure><p>如果只定义<code>@property</code>那么这个属性就是只读的。</p><p><code>@property</code>主要是来保证对参数进行检查限制，减少程序的出错率，保证代码的健壮性。在类的定义中应用较广。</p><p><em>练习：</em>请利用<code>@property</code>给一个<code>Screen</code>对象加上<code>width</code>和<code>height</code>属性，以及一个只读属性<code>resolution</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">width</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self._width</span><br><span class="line"></span><br><span class="line"><span class="meta">@width.setter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">width</span><span class="params">(self, value)</span>:</span></span><br><span class="line">self._width = value <span class="comment"># 起名加下划线是为了区分是函数还是变量，避免递归调用自己</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self._height</span><br><span class="line"></span><br><span class="line"><span class="meta">@width.setter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(self, value)</span>:</span></span><br><span class="line">self._height = value</span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resolution</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">if</span> self._width &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">"with and height must over 0"</span>)</span><br><span class="line"><span class="keyword">return</span> self._width * self._height</span><br><span class="line"></span><br><span class="line">s = Screen()</span><br><span class="line">s.width = <span class="number">1024</span></span><br><span class="line">s.height = <span class="number">768</span></span><br><span class="line">print(<span class="string">'resolution ='</span>, s.resolution)</span><br><span class="line"><span class="keyword">if</span> s.resolution == <span class="number">786432</span>:</span><br><span class="line">    print(<span class="string">'测试通过!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;slots是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。&quot;&gt;&lt;a href=&quot;#slots是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。&quot; class=&quot;headerlink&quot; title=&quot;slots是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。&quot;&gt;&lt;/a&gt;&lt;strong&gt;slots&lt;/strong&gt;是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。&lt;/h5&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="__slots__" scheme="http://yoursite.com/tags/slots/"/>
    
      <category term="property" scheme="http://yoursite.com/tags/property/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记 实例属性和类属性</title>
    <link href="http://yoursite.com/2018/02/01/Python%E7%AC%94%E8%AE%B0%20%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E5%92%8C%E7%B1%BB%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2018/02/01/Python笔记 实例属性和类属性/</id>
    <published>2018-02-01T08:55:54.000Z</published>
    <updated>2018-02-02T02:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python是一门动态语言，根据类创建的实例可以任意绑定属性。<br><a id="more"></a>  </p><h5 id="实例属性的绑定有两种方式："><a href="#实例属性的绑定有两种方式：" class="headerlink" title="实例属性的绑定有两种方式："></a>实例属性的绑定有两种方式：</h5><ul><li><p>在类里面的初始化方法中以<code>self.xxx</code>的方式绑定：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">self.name = name</span><br></pre></td></tr></table></figure></li><li><p>通过实例变量直接复制绑定：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = People(<span class="string">'HeQing'</span>)</span><br><span class="line">s.height = <span class="number">180</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="类属性绑定："><a href="#类属性绑定：" class="headerlink" title="类属性绑定："></a>类属性绑定：</h5><ul><li><p>在类中直接定义属性：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">name = <span class="string">"HeQing"</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="实例属性和类属性之间的关系："><a href="#实例属性和类属性之间的关系：" class="headerlink" title="实例属性和类属性之间的关系："></a>实例属性和类属性之间的关系：</h5><p>如果实例中不存在这个属性，但是类中存在，那么所有的实例都可以调用这个属性，返回的是类属性的值。<br>如果实例中存在与类中同名的属性那么实例调用这个属性则是实例自己的属性。<br>因此不要对类属性和实例属性使用相同的名字，实例属性会屏蔽掉类属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">name = <span class="string">"HeQing"</span></span><br><span class="line"></span><br><span class="line">s = People()</span><br><span class="line">print(s.name)  <span class="comment"># HeQing</span></span><br><span class="line"></span><br><span class="line">s.name = <span class="string">"QingHe"</span></span><br><span class="line">print(s.name)  <span class="comment"># QingHe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> s.name</span><br><span class="line">print(s.name)  <span class="comment"># HeQing</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python是一门动态语言，根据类创建的实例可以任意绑定属性。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="属性" scheme="http://yoursite.com/tags/%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记 dir()函数</title>
    <link href="http://yoursite.com/2018/02/01/Python%E7%AC%94%E8%AE%B0%20dir()%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/02/01/Python笔记 dir()函数/</id>
    <published>2018-02-01T05:16:51.000Z</published>
    <updated>2018-02-02T02:12:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用dir()函数可以获取一个Python的所有属性和方法，返回一个存放字符串的list。<br><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(<span class="string">'string'</span>)</span><br><span class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>,..., <span class="string">'title'</span>, <span class="string">'translate'</span>, <span class="string">'upper'</span>, <span class="string">'zfill'</span>]</span><br></pre></td></tr></table></figure><p><code>__xxx__</code>这样的函数在Python中有特殊用途，如<code>__len__</code>返回长度，当你调用<code>len()</code>时，实际是调用的该对象的<code>__len__()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'abcd'</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abcd'</span>.__len__()</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>如果我们自己定义的类也想用<code>len()</code>方法，需要自己实现<code>__len()__</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Son</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="number">175</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>son = Son()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(son)</span><br><span class="line"><span class="number">175</span></span><br></pre></td></tr></table></figure><p>其他的都是普通的函数和属性，如<code>upper()</code>返回的大写字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'heqing'</span>.upper()</span><br><span class="line"><span class="string">'HEQING'</span></span><br></pre></td></tr></table></figure><p>列出属性和方法还不够，使用<code>getattr</code>、<code>setattr</code>、<code>hasattr</code>，可以操作一个对象的属性状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyObj</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            self.x = <span class="number">9</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self.x * self.x</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = MyObj()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj,<span class="string">'x'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.x</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj,<span class="string">'y'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setattr(obj,<span class="string">'y'</span>,<span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj,<span class="string">'y'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.y</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj,<span class="string">'y'</span>)</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj,<span class="string">'z'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'MyObj'</span> object has no attribute <span class="string">'z'</span></span><br></pre></td></tr></table></figure><p>如果获取一个不存在的属性，会报错<code>&#39;MyObj&#39; object has no attribute &#39;z&#39;</code>.<br>可以设置<code>default</code>参数，属性不存在返回这个参数对应的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj,<span class="string">'z'</span>,<span class="string">'没有这个属性'</span>)</span><br><span class="line"><span class="string">'没有这个属性'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>对象的方法同样可以获取到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj,<span class="string">'power'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj,<span class="string">'power'</span>)</span><br><span class="line">&lt;bound method MyObj.power of &lt;__main__.MyObj object at <span class="number">0x100d18d68</span>&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>只有在不知道对象信息的情况下，才回去分析对象的属性和方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用dir()函数可以获取一个Python的所有属性和方法，返回一个存放字符串的list。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="dir" scheme="http://yoursite.com/tags/dir/"/>
    
  </entry>
  
</feed>
