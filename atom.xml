<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HeQing</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-05T02:10:13.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HeQing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python笔记 __slots__ &amp; @property</title>
    <link href="http://yoursite.com/2018/02/05/Python%E7%AC%94%E8%AE%B0%20__slots__/"/>
    <id>http://yoursite.com/2018/02/05/Python笔记 __slots__/</id>
    <published>2018-02-05T01:02:32.000Z</published>
    <updated>2018-02-05T02:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="slots是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。"><a href="#slots是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。" class="headerlink" title="slots是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。"></a><strong>slots</strong>是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。</h5><a id="more"></a><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'age'</span>)</span><br></pre></td></tr></table></figure><p>那么<code>Student</code>的实例只能添加<code>name</code>，<code>age</code>属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'HeQing'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">18</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">100</span> </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></span><br></pre></td></tr></table></figure><p><code>score</code>属性没有放在<code>__slots__</code>中，所以会报错。</p><p>使用的<code>__slots__</code>的时候要注意，它仅对当前类的实例起作用，对继承的子类的实例不起作用，不会限制子类实例属性的绑定。<br>如果子类中也使用<code>__slots__</code>那么子类实例属性限制为父类的<code>__slots__</code>加上子类的<code>__slots__</code>。</p><h5 id="property是一个装饰器（decorator），负责把一个方法变成属性调用。这个属性我们可以添加限制。"><a href="#property是一个装饰器（decorator），负责把一个方法变成属性调用。这个属性我们可以添加限制。" class="headerlink" title="@property是一个装饰器（decorator），负责把一个方法变成属性调用。这个属性我们可以添加限制。"></a><code>@property</code>是一个装饰器（decorator），负责把一个方法变成属性调用。这个属性我们可以添加限制。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._score </span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must be an integer!'</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must between 0 ~ 100!'</span>)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure><p>把一个<code>getter</code>方法变成属性只需加上<code>@proterty</code>，此时<code>@proterty</code>本身有创建了另一个装饰器<code>@score.setter</code>，负责把一个<code>setter</code>方法变成属性值，这样我们就有了一个可控的属性操作，可以限制属性的值，类型等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">60</span> <span class="comment"># OK，实际转化为s.set_score(60)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score <span class="comment"># OK，实际转化为s.get_score()</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">9999</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between <span class="number">0</span> ~ <span class="number">100</span>!</span><br></pre></td></tr></table></figure><p>如果只定义<code>@property</code>那么这个属性就是只读的。</p><p><code>@property</code>主要是来保证对参数进行检查限制，减少程序的出错率，保证代码的健壮性。在类的定义中应用较广。</p><p><em>练习：</em>请利用<code>@property</code>给一个<code>Screen</code>对象加上<code>width</code>和<code>height</code>属性，以及一个只读属性<code>resolution</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">width</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self._width</span><br><span class="line"></span><br><span class="line"><span class="meta">@width.setter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">width</span><span class="params">(self, value)</span>:</span></span><br><span class="line">self._width = value <span class="comment"># 起名加下划线是为了区分是函数还是变量，避免递归调用自己</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self._height</span><br><span class="line"></span><br><span class="line"><span class="meta">@width.setter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(self, value)</span>:</span></span><br><span class="line">self._height = value</span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resolution</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">if</span> self._width &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">"with and height must over 0"</span>)</span><br><span class="line"><span class="keyword">return</span> self._width * self._height</span><br><span class="line"></span><br><span class="line">s = Screen()</span><br><span class="line">s.width = <span class="number">1024</span></span><br><span class="line">s.height = <span class="number">768</span></span><br><span class="line">print(<span class="string">'resolution ='</span>, s.resolution)</span><br><span class="line"><span class="keyword">if</span> s.resolution == <span class="number">786432</span>:</span><br><span class="line">    print(<span class="string">'测试通过!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;slots是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。&quot;&gt;&lt;a href=&quot;#slots是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。&quot; class=&quot;headerlink&quot; title=&quot;slots是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。&quot;&gt;&lt;/a&gt;&lt;strong&gt;slots&lt;/strong&gt;是一个特殊的变量，使用它可以限制一个类的实例所添加的属性。&lt;/h5&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="__slots__" scheme="http://yoursite.com/tags/slots/"/>
    
      <category term="property" scheme="http://yoursite.com/tags/property/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记 实例属性和类属性</title>
    <link href="http://yoursite.com/2018/02/01/Python%E7%AC%94%E8%AE%B0%20%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E5%92%8C%E7%B1%BB%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2018/02/01/Python笔记 实例属性和类属性/</id>
    <published>2018-02-01T08:55:54.000Z</published>
    <updated>2018-02-02T02:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python是一门动态语言，根据类创建的实例可以任意绑定属性。<br><a id="more"></a>  </p><h5 id="实例属性的绑定有两种方式："><a href="#实例属性的绑定有两种方式：" class="headerlink" title="实例属性的绑定有两种方式："></a>实例属性的绑定有两种方式：</h5><ul><li><p>在类里面的初始化方法中以<code>self.xxx</code>的方式绑定：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">self.name = name</span><br></pre></td></tr></table></figure></li><li><p>通过实例变量直接复制绑定：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = People(<span class="string">'HeQing'</span>)</span><br><span class="line">s.height = <span class="number">180</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="类属性绑定："><a href="#类属性绑定：" class="headerlink" title="类属性绑定："></a>类属性绑定：</h5><ul><li><p>在类中直接定义属性：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">name = <span class="string">"HeQing"</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="实例属性和类属性之间的关系："><a href="#实例属性和类属性之间的关系：" class="headerlink" title="实例属性和类属性之间的关系："></a>实例属性和类属性之间的关系：</h5><p>如果实例中不存在这个属性，但是类中存在，那么所有的实例都可以调用这个属性，返回的是类属性的值。<br>如果实例中存在与类中同名的属性那么实例调用这个属性则是实例自己的属性。<br>因此不要对类属性和实例属性使用相同的名字，实例属性会屏蔽掉类属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">name = <span class="string">"HeQing"</span></span><br><span class="line"></span><br><span class="line">s = People()</span><br><span class="line">print(s.name)  <span class="comment"># HeQing</span></span><br><span class="line"></span><br><span class="line">s.name = <span class="string">"QingHe"</span></span><br><span class="line">print(s.name)  <span class="comment"># QingHe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> s.name</span><br><span class="line">print(s.name)  <span class="comment"># HeQing</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python是一门动态语言，根据类创建的实例可以任意绑定属性。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="属性" scheme="http://yoursite.com/tags/%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记 dir()函数</title>
    <link href="http://yoursite.com/2018/02/01/Python%E7%AC%94%E8%AE%B0%20dir()%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/02/01/Python笔记 dir()函数/</id>
    <published>2018-02-01T05:16:51.000Z</published>
    <updated>2018-02-02T02:12:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用dir()函数可以获取一个Python的所有属性和方法，返回一个存放字符串的list。<br><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(<span class="string">'string'</span>)</span><br><span class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>,..., <span class="string">'title'</span>, <span class="string">'translate'</span>, <span class="string">'upper'</span>, <span class="string">'zfill'</span>]</span><br></pre></td></tr></table></figure><p><code>__xxx__</code>这样的函数在Python中有特殊用途，如<code>__len__</code>返回长度，当你调用<code>len()</code>时，实际是调用的该对象的<code>__len__()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'abcd'</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abcd'</span>.__len__()</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>如果我们自己定义的类也想用<code>len()</code>方法，需要自己实现<code>__len()__</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Son</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="number">175</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>son = Son()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(son)</span><br><span class="line"><span class="number">175</span></span><br></pre></td></tr></table></figure><p>其他的都是普通的函数和属性，如<code>upper()</code>返回的大写字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'heqing'</span>.upper()</span><br><span class="line"><span class="string">'HEQING'</span></span><br></pre></td></tr></table></figure><p>列出属性和方法还不够，使用<code>getattr</code>、<code>setattr</code>、<code>hasattr</code>，可以操作一个对象的属性状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyObj</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            self.x = <span class="number">9</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self.x * self.x</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = MyObj()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj,<span class="string">'x'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.x</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj,<span class="string">'y'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setattr(obj,<span class="string">'y'</span>,<span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj,<span class="string">'y'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.y</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj,<span class="string">'y'</span>)</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj,<span class="string">'z'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'MyObj'</span> object has no attribute <span class="string">'z'</span></span><br></pre></td></tr></table></figure><p>如果获取一个不存在的属性，会报错<code>&#39;MyObj&#39; object has no attribute &#39;z&#39;</code>.<br>可以设置<code>default</code>参数，属性不存在返回这个参数对应的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj,<span class="string">'z'</span>,<span class="string">'没有这个属性'</span>)</span><br><span class="line"><span class="string">'没有这个属性'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>对象的方法同样可以获取到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj,<span class="string">'power'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj,<span class="string">'power'</span>)</span><br><span class="line">&lt;bound method MyObj.power of &lt;__main__.MyObj object at <span class="number">0x100d18d68</span>&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>只有在不知道对象信息的情况下，才回去分析对象的属性和方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用dir()函数可以获取一个Python的所有属性和方法，返回一个存放字符串的list。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="dir" scheme="http://yoursite.com/tags/dir/"/>
    
  </entry>
  
</feed>
